Unit testing for this repo has to be much more holistic than a typical tool. Tests should probably only be run in development (e.g. the __DEV__ idiom).

Kinds of things to tests:

- Does getPageSrcs work perfectly?
- Probably want to test helpers inside of getPageSrcs for accuracy as well
- Does serverGuards guard against files / folders?
- serverGuards should probably validate .conf and make sure everything is setup correctly, including `NODE_ENV`
- Async code inside of prerender functions should be extracted to the extent that it can be tested
- Should communicate to the user when to purge and when to prerender-props (based on the presence or absence of pageProps) -- err from inside of serverGuards probably

Missing core features are

- Dynamic routes (not totally implemented yet)
- Passing state between history changes
- Vendor chunking? How do we do this w/ esbuild (code splitting, still in alpha I think)? Cache invalidation is easy
- Sourcemaps (needed for app.js), that’s basically it
- MDX that ‘just works’, MDX wrapper component
- Recursive folder nesting
- Are loaders supposed to be called for every page load?
- CSS / Sass auto-linking; see https://gist.github.com/pngwn/670bfbf279431866a1194ebcc14faf21#routing (and possibly sourcemaps)
- Hooks like (useParams, useData, maybe useHistory? -- these are kind of annoying, maybe less in TS)

Features we want but can’t do now:

- Extract to some create-react-app thing
- SSR?
- React Refresh
