several problems:

page-based routing
	- problem is creating a recursive list or tree of sources and using a node-rendering service
	- recursion is fairly easy here (we just use walk and get back a list -- items should be order-independent)
	- node-rendering is tricky
		- requires node runtime (fine, not a big deal and we can maybe find a way to stat for the presence of node)
			or at least gracefully shutdown
		- node doesn't know about typescript, and ts-node requires a lot more assumptions than node
			- what we really want is the ability to use node without worrying about types. esbuild can help here.
			- esbuild lexes types but does not parse them; they are basically silent syntax. so what we need to
				is setup a service (pipes or http) that responds to requests with rendered strings. the only reason
				this is annoying is because esbuild doesn't respond to dynamic imports, only static imports, so we
				need to create a plugin that statefully resolves dynamic imports. with that rendering is not really
				a big deal.

	problems: - solving stateful plugins to resolve dynamic imports
						- node rendering service (do not use ts-node if possible)
						- requests can be parallelized in go or node but it seems to make more sense in node because it
							theoretically uses less cpu (due to promises versus threads or goroutines -- goroutines will
							still end up execing child processes so it's better to stick with async i think)

client-side linking
	- this should be optional. whether the users wants to have their pages linked or not should basically be
		a flag. you probably want to have your pages linked, but for the mvp demos, it doesn't matter because
		this is largely a client concern and we are more concerned about server-concerns and rapid development
		environments.
		- if we want to make this an option we should upgraded tests to support this use-case. it probably doesn't
			make sense to not link your pages but it might be a useful idea for a) simpler mvps or b) docs
			walkthrough
	- the history api should probably not use a try / catch but the problem but it does to get around rendering
		on the server (because document doesn't exist). we could stub document which feels like cheating. so
		instead we could instantiate history inside of router. this will probably work because we only bundle
		app.js on the server, we don't actually render it like we do with pages.
	- the problem is that pages import router and router imports history. it looks like react-router-dom just
		instantiates createBrowserHistory in the scope of the <BrowserRouter> component
		- https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/BrowserRouter.js#L11
		- note static-router is implemented in react-router not -dom https://github.com/ReactTraining/react-router/blob/master/packages/react-router/modules/StaticRouter.js

	problems: - clean up history implementation; if we use <Router> then we need useHistory()
							- can you use history outside of react??
						- or we just say like if typeof window !== undefined, object.assign(window, ...)?
						- other getters should include usePageProps() useAppProps() useRouter() (includes history, pathname
							params, etc.)

							useAppProps() // optional
							usePageProps() //
							useRouter() // access to history, state (location.state), params

rapid development environment
	- a dev environment makes several assumptions; we have a base index.html or document.js file we want to use
		as the base for all pages. it probably makes sense to just use an .html file rather than document because
		document has more implementation complexity, effects don't work as expected, and document-like features can
		still be implemented in an app component. therefore it would be better to stick to .html which is easier to
		copy/paste, etc. and then leverage react for routes
	- we need to be able to connect js, css, and go-aware live-reloading
		- js is basically a app.js so that's not a big deal. we just need to know the build folder like we do.
		- css is a little trickier because are we or the esbuild compiling css? in theory we could write a plugin
			to memoize sass builds and then all we have to do is import sass; this calls a rendering service that
			renders sass (doesn't this require npm or dart sass?)
			- if that's too much then we can either manage css ourselves which isn't a big deal (given you can still
				import raw css) or you hoist all css to one bundled css file (this is what esbuild does, but not for sass)
				and then simply link it in the .html file.
				- let's ignore this for now and possibly solve for it later with a plugin, but the plugin
		- go live-reloading looks fun and is more reliable than naive approaches (using nodemon, for example)

	problems: - base index.html to inherit from. preferably we generate this for the user and never generate this
							in-memory
						- needs a live-reloading, http server implementation
						- error messaging should be ok because hopefully esbuild will catch errors then we can render to the page
							ourselves using golang
						- connecting js and css can be done with
							- <div id="root"></div>
							- <script src="%RETRO_APP%"></script> or
							- <link rel="stylesheet" href="%RETRO_CSS%"> (remove if css is done separately)
								- problem with {{ syntax }} is that it breaks prettier
						- finally we have the problem of head tags. we can render head tags on the server no problem but
							the question is a) for the development server what do we do and b) for the client js file, how
							do we alternate head tags?
							- we have to chose whether we want to rendertostring <head> and hydrate in development mode. it
								would be easier to start by simply skipping this step and leveraging client-side logic for
								alternating head tags
								- in theory we can upgrade to the hydrate approach if we have a rendering service we can tap into
									for head, body and then just request on demand (this is basically ssr)
								- to alternate head tags, we need some kind of useEffect logic coupled with routed pages. so
									maybe we do something like:

									import Page, { head as PageHead } from "./pages/page"

									export default function RoutedApp() {
										return (
											<PageHead {...{ appProps, pageProps }}>
												<App {...{ appProps, pageProps }}>
													<Page {...{ appProps, pageProps }} />
												</App>
											</PageHead>
										)
									}

								- next head impl: https://github.com/vercel/next.js/blob/canary/packages/next/next-server/lib/head.tsx
								- next head impl: https://github.com/vercel/next.js/blob/canary/packages/next/client/link.tsx

								- do we want users to be able to use <Head> wherever they want? probably not, since it's a
									top-level page-component abstraction
								- finally data() or props() or load() or whatever should feed into head

finally we are missing support for mdx and possibly localization (in the future)


             R~E~T~R~O
Back-to-the-future website development

// Rapid development environment
retro dev

// Production-ready build
retro build

// Serve the production-ready build
retro serve
