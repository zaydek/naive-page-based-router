{
  "version": 3,
  "sources": ["export.ts"],
  "sourcesContent": ["import * as esbuild from \"esbuild\"\nimport * as fs from \"fs/promises\"\nimport * as p from \"path\"\nimport * as React from \"react\"\nimport * as ReactDOMServer from \"react-dom/server\"\nimport * as types from \"./types\"\n\n// RenderPayload describes a render payload (page metadata).\ninterface RenderPayload {\n\toutputPath: string\n\tpath: string\n\tmodule: types.StaticPageModule | types.DynamicPageModule\n\tprops?: types.ServerProps\n}\n\n// \"/\" -> \"/index.html\"\n// \"/nested/\" -> \"/nested/index.html\"\nfunction pathToHTML(path: string): string {\n\tif (!path.endsWith(\"/\")) return path + \".html\"\n\treturn path + \"index.html\"\n}\n\n// exportPage exports a page.\nasync function exportPage(runtime: types.Runtime, render: RenderPayload): Promise<void> {\n\t// Render head:\n\tlet head = \"<!-- <Head> -->\"\n\tif (typeof render.module.Head === \"function\") {\n\t\tconst markup = ReactDOMServer.renderToStaticMarkup(React.createElement(render.module.Head, render.props))\n\t\thead = markup.replace(/></g, \">\\n\\t\\t<\").replace(/\\/>/g, \" />\")\n\t}\n\n\t// Render page:\n\tlet page = `\n\t\t<noscript>You need to enable JavaScript to run this app.</noscript>\n\t\t<div id=\"root\"></div>\n\t\t<script src=\"/app.js\"></script>\n\t`.trim()\n\n\t// prettier-ignore\n\tif (typeof render.module.default === \"function\") {\n\t\tconst str = ReactDOMServer.renderToString(React.createElement(render.module.default, render.props))\n\t\tpage = page.replace(\n\t\t\t`<div id=\"root\"></div>`,\n\t\t\t`<div id=\"root\">${str}</div>`,\n\t\t)\n\t}\n\n\t// prettier-ignore\n\tconst data = runtime.baseHTML\n\t\t.replace(\"%head%\", head)\n\t\t.replace(\"%page%\", page)\n\n\t// Export:\n\tawait fs.mkdir(p.dirname(render.outputPath), { recursive: true })\n\tawait fs.writeFile(render.outputPath, data)\n}\n\n// exportPagesAndCreateRouter exports pages and creates a router from the return\n// of mod.serverProps and mod.serverPaths.\nasync function exportPagesAndCreateRouter(runtime: types.Runtime): Promise<types.ServerRouter> {\n\tconst router: types.ServerRouter = {}\n\n\tconst service = await esbuild.startService()\n\n\t// TODO: Add --concurrent?\n\tfor (const route of runtime.filesystemRouter) {\n\t\t// Generate paths for esbuild:\n\t\tconst entryPoints = [route.inputPath]\n\t\tconst outfile = p.join(\n\t\t\truntime.directoryConfiguration.cacheDir,\n\t\t\tentryPoints[0]!.replace(/\\.(jsx?|tsx?)$/, \".esbuild.js\"),\n\t\t)\n\n\t\t// Use external: [\"react\", \"react-dom\"] to prevent a React error: You might\n\t\t// have mismatching versions of React and the renderer (such as React DOM).\n\t\tawait service.build({\n\t\t\tbundle: true,\n\t\t\tdefine: {\n\t\t\t\t__DEV__: process.env.__DEV__!,\n\t\t\t\t\"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV),\n\t\t\t},\n\t\t\tentryPoints,\n\t\t\texternal: [\"react\", \"react-dom\"],\n\t\t\tformat: \"cjs\", // Node.js\n\t\t\tloader: {\n\t\t\t\t\".js\": \"jsx\",\n\t\t\t},\n\t\t\tlogLevel: \"silent\", // TODO\n\t\t\toutfile,\n\t\t\t// plugins: [...configs.retro.plugins], // TODO\n\t\t})\n\t\t// TODO: Handle warnings, error, and hints.\n\n\t\tconst mod = require(\"../\" + outfile)\n\n\t\t// TODO: Add cache check here.\n\n\t\tlet descriptProps: types.ServerProps\n\t\tif (typeof mod.serverProps === \"function\") {\n\t\t\tconst props = await mod.serverProps()\n\t\t\tdescriptProps = {\n\t\t\t\tpath: route.path, // Add path\n\t\t\t\t...props,\n\t\t\t}\n\t\t}\n\n\t\t// TODO: Warn here for non-dynamic filesystem routes.\n\t\tif (typeof mod.serverPaths === \"function\") {\n\t\t\tconst srvPaths: types.DescriptiveServerPaths = await mod.serverPaths(descriptProps)\n\n\t\t\t// Generate a component router:\n\t\t\tconst compRouter: types.ServerRouter = {}\n\t\t\tfor (const { path, props } of srvPaths) {\n\t\t\t\tcompRouter[path] = {\n\t\t\t\t\troute,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\t...props,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [path, { props }] of Object.entries(compRouter)) {\n\t\t\t\t// Merge the component router to the app router:\n\t\t\t\t//\n\t\t\t\t// TODO: Warn here for repeat paths.\n\t\t\t\trouter[path] = { route, props }\n\n\t\t\t\t// Create a renderPayload for exportPage:\n\t\t\t\tconst outputPath = p.join(runtime.directoryConfiguration.exportDir, pathToHTML(path))\n\t\t\t\tconst render: RenderPayload = {\n\t\t\t\t\toutputPath,\n\t\t\t\t\tpath,\n\t\t\t\t\tmodule: mod,\n\t\t\t\t\tprops,\n\t\t\t\t}\n\t\t\t\tawait exportPage(runtime, render)\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// Merge the route to the app router:\n\t\t//\n\t\t// TODO: Warn here for repeat paths.\n\t\tconst path = route.path\n\t\trouter[path] = { route, props: descriptProps }\n\n\t\t// Create a renderPayload for exportPage:\n\t\tconst outputPath = p.join(runtime.directoryConfiguration.exportDir, pathToHTML(path))\n\t\tconst render: RenderPayload = {\n\t\t\toutputPath,\n\t\t\tpath,\n\t\t\tmodule: mod,\n\t\t\tprops: descriptProps,\n\t\t}\n\t\tawait exportPage(runtime, render)\n\t}\n\n\treturn router\n}\n\n// renderAppSource renders the App source code (before esbuild).\n//\n// TODO: Write tests (pure function).\nexport async function renderAppSource(router: types.ServerRouter): Promise<string> {\n\t// Get the shared components:\n\tconst sharedComps = [...new Set(Object.keys(router).map(keys => router[keys]!.route.component))]\n\n\t// Create a shared server router based on shared component keys:\n\tconst sharedRouter: types.ServerRouter = {}\n\tfor (const [, meta] of Object.entries(router)) {\n\t\tconst comp = meta.route.component\n\t\tif (sharedComps.includes(comp) && sharedRouter[comp] === undefined) {\n\t\t\tsharedRouter[comp] = meta\n\t\t}\n\t}\n\n\treturn `import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Route, Router } from \"../router\"\n\n// Shared components\n${Object.entries(sharedRouter)\n\t.map(([, { route }]) => `import ${route.component} from \"../${route.inputPath}\"`)\n\t.join(\"\\n\")}\n\nimport router from \"./router.json\"\n\nexport default function App() {\n\treturn (\n\t\t<Router>\n${\n\tObject.entries(router)\n\t\t.map(\n\t\t\t([path_, meta]) => `\n\t\t\t<Route path=\"${path_}\">\n\t\t\t\t<${meta.route.component} {...{\n\t\t\t\t\tpath: \"${path_}\",\n\t\t\t\t\t...router[\"${path_}\"].serverProps,\n\t\t\t\t}} />\n\t\t\t</Route>`,\n\t\t)\n\t\t.join(\"\\n\") + \"\\n\"\n}\n\t\t</Router>\n\t)\n}\n\nReactDOM.hydrate(\n\t// <React.StrictMode> // TODO\n\t<App />,\n\t// </React.StrictMode>\n\tdocument.getElementById(\"root\"),\n)\n`\n}\n\nasync function run(runtime: types.Runtime): Promise<void> {\n\tconst router = await exportPagesAndCreateRouter(runtime)\n\n\t// Cache router for --cached:\n\tconst dst = p.join(runtime.directoryConfiguration.cacheDir, \"router.json\")\n\tconst data = JSON.stringify(router, null, \"\\t\") + \"\\n\" // EOF\n\tawait fs.writeFile(dst, data)\n\n\tconst appSource = await renderAppSource(router)\n\tconst appSourcePath = p.join(runtime.directoryConfiguration.cacheDir, \"app.js\")\n\tawait fs.writeFile(appSourcePath, appSource)\n\n\t// Generate paths for esbuild:\n\tconst entryPoints = [appSourcePath]\n\tconst outfile = entryPoints[0]!.replace(\n\t\tnew RegExp(\"^\" + runtime.directoryConfiguration.cacheDir.replace(\"/\", \"\\\\/\")),\n\t\truntime.directoryConfiguration.exportDir,\n\t)\n\n\tawait esbuild.build({\n\t\tbundle: true,\n\t\tdefine: {\n\t\t\t__DEV__: process.env.__DEV__!,\n\t\t\t\"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV),\n\t\t},\n\t\tentryPoints,\n\t\tformat: \"iife\", // DOM\n\t\tloader: {\n\t\t\t\".js\": \"jsx\",\n\t\t},\n\t\tlogLevel: \"silent\", // TODO\n\t\toutfile,\n\t\tminify: true,\n\t\t// TODO: We should probably only need to resolve plugins once.\n\t\t// plugins: [...configs.retro.plugins],\n\t})\n\t// TODO: Handle warnings, error, and hints.\n}\n\n;(async () => {\n\ttry {\n\t\tawait run(require(\"../__cache__/runtime.json\"))\n\t} catch (error) {\n\t\tconsole.error(error.stack)\n\t}\n})()\n"],
  "mappings": "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",
  "names": []
}
