{
  "version": 3,
  "sources": ["../lib/term.ts", "errors.ts", "../lib/log.ts", "utils/env.ts", "utils/formatEsbuild.ts", "utils/modes.ts", "utils/prettyJSON.ts", "utils/validators.ts", "utils/watcher.ts", "cmd_dev.ts", "events.ts", "resolvers.ts", "resolvers-text.ts", "preflight.ts", "pages.ts", "cmd_export.ts", "cmd_serve.ts", "cli.ts", "main.ts"],
  "sourcesContent": ["// BuilderFunction describes the builder pattern where a function or a method\n// (recursively) can be called.\n//\n// For example:\n//\n// - function(...)\n// - function.method(...)\n// - function.method.method(...)\n//\nexport interface Builder {\n\t(...args: unknown[]): string\n\tnormal: Builder\n\tbold: Builder\n\tdim: Builder\n\tunderline: Builder\n\tblack: Builder\n\tred: Builder\n\tgreen: Builder\n\tyellow: Builder\n\tblue: Builder\n\tmagenta: Builder\n\tcyan: Builder\n\twhite: Builder\n\tbgBlack: Builder\n\tbgRed: Builder\n\tbgGreen: Builder\n\tbgYellow: Builder\n\tbgBlue: Builder\n\tbgMagenta: Builder\n\tbgCyan: Builder\n\tbgWhite: Builder\n}\n\nconst options = [\n\t{ name: \"normal\", code: \"\\x1b[0m\" },\n\t{ name: \"bold\", code: \"\\x1b[1m\" },\n\t{ name: \"dim\", code: \"\\x1b[2m\" },\n\t{ name: \"underline\", code: \"\\x1b[4m\" },\n\t{ name: \"black\", code: \"\\x1b[30m\" },\n\t{ name: \"red\", code: \"\\x1b[31m\" },\n\t{ name: \"green\", code: \"\\x1b[32m\" },\n\t{ name: \"yellow\", code: \"\\x1b[33m\" },\n\t{ name: \"blue\", code: \"\\x1b[34m\" },\n\t{ name: \"magenta\", code: \"\\x1b[35m\" },\n\t{ name: \"cyan\", code: \"\\x1b[36m\" },\n\t{ name: \"white\", code: \"\\x1b[37m\" },\n\t{ name: \"bgBlack\", code: \"\\x1b[40m\" },\n\t{ name: \"bgRed\", code: \"\\x1b[41m\" },\n\t{ name: \"bgGreen\", code: \"\\x1b[42m\" },\n\t{ name: \"bgYellow\", code: \"\\x1b[43m\" },\n\t{ name: \"bgBlue\", code: \"\\x1b[44m\" },\n\t{ name: \"bgMagenta\", code: \"\\x1b[45m\" },\n\t{ name: \"bgCyan\", code: \"\\x1b[46m\" },\n\t{ name: \"bgWhite\", code: \"\\x1b[47m\" },\n]\n\n// function clean(str: string): string {\n// \tlet out = \"\"\n//\n// \tlet x = 0\n// \twhile (x < str.length) {\n// \t\tlet codes: string[] = []\n// \t\tlet x2 = x\n//\n// \t\t// On \"\\x1b\":\n// \t\twhile (str[x2] === \"\\x1b\") {\n// \t\t\tx2++\n//\n// \t\t\t// Step over \"[\":\n// \t\t\tif (x2 >= str.length || str[x2] !== \"[\") {\n// \t\t\t\tbreak\n// \t\t\t}\n// \t\t\tx2++\n// \t\t\t// Step over /\\d+/:\n// \t\t\tconst start = x2\n// \t\t\twhile (x2 < str.length) {\n// \t\t\t\tif (str[x2]! < \"0\" || str[x2]! > \"9\") {\n// \t\t\t\t\tbreak\n// \t\t\t\t}\n// \t\t\t\tx2++\n// \t\t\t}\n// \t\t\t// Guard /\\d+/:\n// \t\t\tconst end = x2\n// \t\t\tif (start === end) {\n// \t\t\t\tbreak\n// \t\t\t}\n// \t\t\t// Step over \"m\":\n// \t\t\tif (x2 >= str.length || str[x2] !== \"m\") {\n// \t\t\t\tbreak\n// \t\t\t}\n// \t\t\tx2++\n// \t\t\tcodes.push(str.slice(start, end))\n// \t\t}\n//\n// \t\t// On one or more code matches:\n// \t\tif (codes.length > 0) {\n// \t\t\tout += `\\x1b[${codes.join(\";\")}m`\n// \t\t\tx = x2\n// \t\t\tcontinue\n// \t\t}\n//\n// \t\t// Shortcut:\n// \t\tif (x2 > x) {\n// \t\t\tout += str.slice(x, x2)\n// \t\t\tx = x2\n// \t\t\tcontinue\n// \t\t}\n// \t\tout += str[x]\n// \t\tx++\n// \t}\n// \treturn out\n// }\n\nfunction build(...codes: string[]): Builder {\n\tconst set = new Set(codes)\n\n\tfunction format(...args: unknown[]): string {\n\t\tconst coded = [...set].join(\"\")\n\t\t// return clean(coded + args.join(\" \").replaceAll(\"\\x1b[0m\", \"\\x1b[0m\" + coded) + \"\\x1b[0m\")\n\t\treturn coded + args.join(\" \").replaceAll(\"\\x1b[0m\", \"\\x1b[0m\" + coded) + \"\\x1b[0m\"\n\t}\n\n\tfor (const { name, code } of options) {\n\t\tObject.defineProperty(format, name, {\n\t\t\tenumerable: true,\n\t\t\tget() {\n\t\t\t\treturn build(...[...codes, code])\n\t\t\t},\n\t\t})\n\t}\n\n\t// NOTE: Use 'as builder' because there\u2019s no initializer syntax for functions\n\t// with methods.\n\treturn format as Builder\n}\n\nexport const noop = (...args: unknown[]): string => args.join(\" \")\nexport const normal = build(\"\\x1b[0m\")\nexport const bold = build(\"\\x1b[1m\")\nexport const dim = build(\"\\x1b[2m\")\nexport const underline = build(\"\\x1b[4m\")\nexport const black = build(\"\\x1b[30m\")\nexport const red = build(\"\\x1b[31m\")\nexport const green = build(\"\\x1b[32m\")\nexport const yellow = build(\"\\x1b[33m\")\nexport const blue = build(\"\\x1b[34m\")\nexport const magenta = build(\"\\x1b[35m\")\nexport const cyan = build(\"\\x1b[36m\")\nexport const white = build(\"\\x1b[37m\")\nexport const bgBlack = build(\"\\x1b[40m\")\nexport const bgRed = build(\"\\x1b[41m\")\nexport const bgGreen = build(\"\\x1b[42m\")\nexport const bgYellow = build(\"\\x1b[43m\")\nexport const bgBlue = build(\"\\x1b[44m\")\nexport const bgMagenta = build(\"\\x1b[45m\")\nexport const bgCyan = build(\"\\x1b[46m\")\nexport const bgWhite = build(\"\\x1b[47m\")\n", "import * as term from \"../lib/term\"\nimport * as types from \"./types\"\n\n// // detab removes leading tabs.\n// function detab(str: string): string {\n// \tconst arr = str.trim().split(\"\\n\")\n//\n// \tlet min = 0\n// \tfor (const each of arr) {\n// \t\tif (each.length === 0) continue\n// \t\tlet x = 0\n// \t\twhile (x < each.length) {\n// \t\t\tif (each[x] !== \"\\t\") {\n// \t\t\t\t// No-op\n// \t\t\t\tbreak\n// \t\t\t}\n// \t\t\tx++\n// \t\t}\n// \t\tif (x < min) {\n// \t\t\tmin = x\n// \t\t}\n// \t}\n//\n// \tconst out = arr.map(each => each.slice(min)).join(\"\\n\")\n// \treturn out\n// }\n\n////////////////////////////////////////////////////////////////////////////////\n// CLI\n////////////////////////////////////////////////////////////////////////////////\n\nexport function badCLIRunCommand(run: string): string {\n\treturn `Bad run command ${term.magenta(`'${run}'`)}.\n\nSupported commands:\n\nretro dev     Start the dev server\nretro export  Export the production-ready build (SSG)\nretro serve   Serve the production-ready build\n\n${term.yellow(\"hint:\")} Use ${term.magenta(\"'retro usage'\")} for usage.`\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Document (index.html)\n////////////////////////////////////////////////////////////////////////////////\n\nexport function missingDocumentHeadTag(path: string): string {\n\treturn `${path}: Add ${term.magenta(\"'%head%'\")} somewhere to ${term.magenta(\"'<head>'\")}.\n\nFor example:\n\n${term.dim(`// ${path}`)}\n<!DOCTYPE html>\n\t<head lang=\"en\">\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t${term.magenta(\"%head%\")}\n\t\t${term.dim(\"...\")}\n\t</head>\n\t<body>\n\t\t${term.dim(\"...\")}\n\t</body>\n</html>`\n}\n\nexport function missingDocumentPageTag(path: string): string {\n\treturn `${path}: Add ${term.magenta(\"'%page%'\")} somewhere to ${term.magenta(\"'<body>'\")}.\n\nFor example:\n\n${term.dim(`// ${path}`)}\n<!DOCTYPE html>\n\t<head lang=\"en\">\n\t\t${term.dim(\"...\")}\n\t</head>\n\t<body>\n\t\t${term.magenta(\"%page%\")}\n\t\t${term.dim(\"...\")}\n\t</body>\n</html>`\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Server API (static pages)\n////////////////////////////////////////////////////////////////////////////////\n\nexport function serverPropsFunction(src: string): string {\n\treturn `${src}.serverProps: ${term.magenta(\"'serverProps'\")} must be a function.\n\nFor example:\n\n${term.dim(`// ${src}`)}\nexport function serverProps() {\n\treturn { ${term.dim(\"...\")} }\n}\n\nOr:\n\n${term.dim(`// ${src}`)}\nexport async function serverProps() {\n\tawait ${term.dim(\"...\")}\n\treturn { ${term.dim(\"...\")} }\n}`\n}\n\nexport function serverPropsReturn(src: string): string {\n\treturn `${src}.serverProps: Bad ${term.magenta(\"'serverProps'\")} resolver.\n\nFor example:\n\n${term.dim(`// ${src}`)}\nexport function serverProps() {\n\treturn { ${term.dim(\"...\")} }\n}`\n}\n\nexport function serverPathsMismatch(src: string): string {\n\treturn `${src}: Use ${term.magenta(\"'serverProps'\")} for non-dynamic pages, not ${term.magenta(\"'serverPaths'\")}.\n\nFor example:\n\n${term.dim(`// ${src}`)}\nexport function serverProps() {\n\treturn { ${term.dim(\"...\")} }\n}`\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Server API (dynamic pages)\n////////////////////////////////////////////////////////////////////////////////\n\nexport function serverPathsFunction(src: string): string {\n\treturn `${src}.serverPaths: ${term.magenta(\"'serverPaths'\")} must be a function.\n\nFor example:\n\n${term.dim(`// ${src}`)}\nexport function serverPaths() {\n\treturn { ${term.dim(\"...\")} }\n}\n\nOr:\n\n${term.dim(`// ${src}`)}\nexport async function serverPaths() {\n\tawait ${term.dim(\"...\")}\n\treturn { ${term.dim(\"...\")} }\n}`\n}\n\nexport function serverPathsReturn(src: string): string {\n\treturn `\n${src}.serverPaths: Bad ${term.magenta(\"'serverPaths'\")} resolver.\n\nFor example:\n\n${term.dim(`// ${src}`)}\nexport function serverPaths() {\n\treturn [\n\t\t{ path: \"/foo\", props: ${term.dim(\"...\")} },\n\t\t{ path: \"/foo/bar\", props: ${term.dim(\"...\")} },\n\t\t{ path: \"/foo/bar/baz\", props: ${term.dim(\"...\")} },\n\t]\n}`\n}\n\nexport function serverPropsMismatch(src: string): string {\n\treturn `${src}: Use ${term.magenta(\"'serverPaths'\")} for dynamic pages, not ${term.magenta(\"'serverProps'\")}.\n\nFor example:\n\n${term.dim(`// ${src}`)}\nexport function serverPaths() {\n\treturn [\n\t\t{ path: \"/foo\", props: ${term.dim(\"...\")} },\n\t\t{ path: \"/foo/bar\", props: ${term.dim(\"...\")} },\n\t\t{ path: \"/foo/bar/baz\", props: ${term.dim(\"...\")} },\n\t]\n}`\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Server API (miscellaneous)\n////////////////////////////////////////////////////////////////////////////////\n\nexport function duplicatePathFound(r1: types.Route, r2: types.Route): string {\n\tfunction caller(r: types.Route): string {\n\t\treturn r.type === \"static\" ? \"serverProps\" : \"serverPaths\"\n\t}\n\treturn `${r1.src}.${caller(r1)}: Path ${term.magenta(`'${r1.path}'`)} used by ${r2.src}.${caller(r2)}.`\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Serve command\n////////////////////////////////////////////////////////////////////////////////\n\nexport function serveWithoutExport(): string {\n\treturn `It looks like you\u2019re trying to run ${term.magenta(\"'retro serve'\")} before ${term.magenta(\n\t\t\"'retro export'\",\n\t)}. Try ${term.magenta(\"'retro export && retro serve'\")}.`\n}\n", "import * as term from \"../lib/term\"\n\n// format converts tabs to spaces and adds two spaces to the start.\nfunction format(...args: unknown[]): string {\n\tif (args.length === 1 && args[0] instanceof Error) {\n\t\treturn format(args[0].message)\n\t}\n\n\treturn args\n\t\t.join(\" \")\n\t\t.split(\"\\n\")\n\t\t.map((each, x) => {\n\t\t\t// if (x === 0) return term.bold(each)\n\t\t\tif (x === 0) return each\n\t\t\tif (each === \"\") return each\n\t\t\treturn \"\\x20\" + each.replace(\"\\t\", \"  \")\n\t\t})\n\t\t.join(\"\\n\")\n}\n\n// \"> ok: ...\"\nexport function ok(...args: unknown[]): void {\n\tconst message = format(...args)\n\tconsole.log(`\\x20${term.bold(\">\")} ${term.bold(message)}`)\n\tconsole.log()\n}\n\n// \"> warning: ...\"\nexport function warning(...args: unknown[]): void {\n\tconst message = format(...args)\n\tconsole.warn(`\\x20${term.bold(\">\")} ${term.bold.yellow(\"warning:\")} ${term.bold(message)}`)\n\tconsole.warn()\n}\n\n// \"> error: ...\"\nexport function error(...args: unknown[]): void {\n\tconst message = format(...args)\n\tconst traceEnabled = process.env[\"STACK_TRACE\"] === \"true\"\n\tif (!traceEnabled) {\n\t\tconsole.error(`\\x20${term.bold(\">\")} ${term.bold.red(\"error:\")} ${term.bold(message)}`)\n\t\tconsole.error()\n\t} else {\n\t\tconsole.error(`\\x20${term.bold(\">\")} ${term.bold.red(\"error:\")} ${term.bold(message)}`)\n\t\tconsole.error()\n\t}\n\tprocess.exit(0)\n}\n", "// setEnvDevelopment sets environment variables for development mode.\nexport function setEnvDevelopment(): void {\n\tprocess.env[\"__DEV__\"] = \"true\"\n\tprocess.env[\"NODE_ENV\"] = \"development\"\n}\n\n// setEnvProduction sets environment variables for production mode.\nexport function setEnvProduction(): void {\n\tprocess.env[\"__DEV__\"] = \"false\"\n\tprocess.env[\"NODE_ENV\"] = \"production\"\n}\n", "import * as esbuild from \"esbuild\"\nimport * as term from \"../../lib/term\"\n\n// loc.file:loc.line:loc.column: msg.text\n//\n// loc.line | loc.lineText\n//            ~~~~~~~~~~~~\n//\n// TODO: Add support for hints.\nexport function formatEsbuildMessage(msg: esbuild.Message, color: (...args: unknown[]) => void): string {\n\tconst loc = msg.location!\n\treturn `${loc.file}:${loc.line}:${loc.column}: ${msg.text}\n\n\t${loc.line} ${term.dim(\"\u2502\")} ${loc.lineText}\n\t${\" \".repeat(String(loc.line).length)} ${term.dim(\"\u2502\")} ${\" \".repeat(loc.column)}${color(\"~\".repeat(loc.length))}`\n\t// ${\" \".repeat(String(loc.line).length)} ${term.dim(\"\u2502\")} ${\" \".repeat(loc.column)}${color(\"^\")}`\n}\n", "import * as p from \"path\"\n\n// spaify converts a URL for SPA-mode.\n//\n// TODO: Write tests.\nexport function spaify(_: string): string {\n\treturn \"/\"\n}\n\n// ssgify converts a URL for SSG-mode.\n//\n// TODO: Write tests.\nexport function ssgify(url: string): string {\n\tif (url.endsWith(\"/\")) return url + \"index.html\"\n\tif (p.extname(url) === \"\") return url + \".html\"\n\treturn url\n}\n", "// TODO: Write tests.\nexport function prettyJSON(value: unknown): string {\n\treturn JSON.stringify(value)\n\t\t.replace(/^{\"/, `{ \"`)\n\t\t.replace(/\":\"/g, `\": \"`)\n\t\t.replace(/\",\"/g, `\", \"`)\n\t\t.replace(/\"}$/, `\" }`)\n}\n", "function validateObject(value: unknown): boolean {\n\treturn typeof value === \"object\" && value !== null && !Array.isArray(value)\n}\n\nfunction validateArray(value: unknown): boolean {\n\treturn typeof value === \"object\" && value !== null && Array.isArray(value)\n}\n\nexport function validateServerPropsReturn(value: unknown): boolean {\n\treturn validateObject(value)\n}\n\nexport function validateServerPathsReturn(value: unknown): boolean {\n\ttype UnknownArray = unknown[]\n\ttype UnknownObject = { [key: string]: unknown }\n\n\t// prettier-ignore\n\tconst ok = validateArray(value) &&\n\t\t(value as UnknownArray).every(each => {\n\t\t\tconst ok = validateObject(each) &&\n\t\t\t\t(\"path\" in (each as UnknownObject) && typeof (each as UnknownObject).path === \"string\") &&\n\t\t\t\t(\"props\" in (each as UnknownObject) && validateServerPropsReturn((each as UnknownObject).props))\n\t\t\treturn ok\n\t\t})\n\treturn ok\n}\n", "import * as fs from \"fs/promises\"\nimport * as p from \"path\"\n\nexport function sleep(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport async function* watcher(root: string, { interval }: { interval: number }): AsyncGenerator<string> {\n\tconst mtimeMsMap: { [key: string]: number } = {}\n\n\tasync function read(entry: string, { deep }: { deep: boolean }): Promise<string> {\n\t\tconst stat = await fs.stat(entry)\n\t\tconst mtimeMs = mtimeMsMap[entry]\n\t\tif (mtimeMs === undefined || stat.mtimeMs !== mtimeMs) {\n\t\t\tmtimeMsMap[entry] = stat.mtimeMs\n\t\t\tif (!deep) {\n\t\t\t\treturn entry\n\t\t\t}\n\t\t}\n\t\tif (stat.isDirectory()) {\n\t\t\tfor (const each of await fs.readdir(entry)) {\n\t\t\t\tconst src = p.join(entry, each)\n\t\t\t\tconst result = await read(src, { deep })\n\t\t\t\tif (result !== \"\") {\n\t\t\t\t\tif (!deep) {\n\t\t\t\t\t\treturn result\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn \"\"\n\t}\n\n\tawait read(root, { deep: true })\n\n\t// Generate source changes:\n\twhile (true) {\n\t\tawait sleep(interval)\n\t\tconst src = await read(root, { deep: false })\n\t\tif (src !== \"\") {\n\t\t\tyield src\n\t\t}\n\t}\n}\n", "import * as esbuild from \"esbuild\"\nimport * as events from \"./events\"\nimport * as fs from \"fs/promises\"\nimport * as http from \"http\"\n// import * as log from \"../lib/log\"\nimport * as p from \"path\"\nimport * as resolvers from \"./resolvers\"\nimport * as resolversText from \"./resolvers-text\"\n// import * as term from \"../lib/term\"\nimport * as types from \"./types\"\nimport * as utils from \"./utils\"\n\nimport preflight from \"./preflight\"\n\n// interface ExportCache {\n// \t[key: string]: {\n// \t\tmtimeMs: number\n// \t\thtml: string\n// \t}\n// }\n\n// async function build(runtime: types.Runtime<types.DevCommand>): Promise<esbuild.BuildResult> {\n// \tconst appContents = await resolversText.renderRouterToString(runtime)\n// \tconst appContentsPath = p.join(runtime.directories.cacheDir, \"app.js\")\n// \tawait fs.writeFile(appContentsPath, appContents)\n//\n// \tlet result: esbuild.BuildResult\n// \ttry {\n// \t\tresult = await esbuild.build({\n// \t\t\tincremental: true, // TODO\n//\n// \t\t\tbundle: true,\n// \t\t\tdefine: {\n// \t\t\t\t__DEV__: process.env.__DEV__!,\n// \t\t\t\t\"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV),\n// \t\t\t},\n// \t\t\tentryPoints: [appContentsPath],\n// \t\t\tinject: [\"packages/retro/react-shim.js\"],\n// \t\t\tloader: { \".js\": \"jsx\" },\n// \t\t\tlogLevel: \"silent\", // TODO\n// \t\t\tminify: false,\n// \t\t\toutfile: p.join(runtime.directories.exportDir, appContentsPath.slice(runtime.directories.srcPagesDir.length)),\n// \t\t\t// plugins: [...configs.retro.plugins], // TODO\n// \t\t})\n// \t\t// TODO: Add support for hints.\n// \t\tif (result.warnings.length > 0) {\n// \t\t\tfor (const warning of result.warnings) {\n// \t\t\t\tlog.warning(utils.formatEsbuildMessage(warning, term.yellow))\n// \t\t\t}\n// \t\t\tprocess.exit(1)\n// \t\t}\n// \t} catch (err) {\n// \t\t// TODO: Differentiate esbuild errors.\n// \t\tlog.error(utils.formatEsbuildMessage((err as esbuild.BuildFailure).errors[0]!, term.bold.red))\n// \t}\n//\n// \treturn result!\n// }\n\n// const cache: ExportCache = {}\n\nexport default async function retro_dev(runtime: types.Runtime<types.DevCommand>): Promise<void> {\n\tawait preflight(runtime)\n\n\t// let emit: () => void | undefined\n\t//\tconst result = await build(runtime)\n\t//\t// TODO: Add esbuild error-handling here.\n\t//\n\t//\tasync function watch(): Promise<void> {\n\t//\t\tconst generator = utils.watcher(\"src\", { interval: 100 })\n\t//\t\tasync function next(): Promise<string> {\n\t//\t\t\treturn (await generator.next()).value\n\t//\t\t}\n\t//\n\t//\t\t// TODO: Add event here.\n\t//\t\twhile (true) {\n\t//\t\t\tawait next()\n\t//\t\t\tawait result.rebuild!()\n\t//\t\t\t// TODO: Add esbuild error-handling here.\n\t//\t\t\tif (emit) emit()\n\t//\t\t}\n\t//\t}\n\t//\n\t//\twatch()\n\n\t// prettier-ignore\n\tconst result = await esbuild.serve({\n\t\tservedir: runtime.directories.exportDir,\n\t\tonRequest: (args: esbuild.ServeOnRequestArgs) => events.serve(args)\n\t}, {})\n\n\tconst srvProxy = http.createServer(\n\t\tasync (req: http.IncomingMessage, res: http.ServerResponse): Promise<void> => {\n\t\t\t// Handle /~dev:\n\t\t\tif (req.url === \"/~dev\") {\n\t\t\t\tres.writeHead(200, {\n\t\t\t\t\t\"Content-Type\": \"text/event-stream\",\n\t\t\t\t\t\"Cache-Control\": \"no-cache\",\n\t\t\t\t\tConnection: \"keep-alive\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Compute the path from the URL:\n\t\t\tlet path = req.url\n\t\t\tif (p.extname(req.url!) === \".html\") {\n\t\t\t\tpath = path.slice(0, -5)\n\t\t\t}\n\n\t\t\tconst meta = runtime.router[path]\n\t\t\tif (meta !== undefined) {\n\t\t\t\t// Regenerate component.esbuild.js:\n\t\t\t\tconst mod = await resolvers.resolveModule(runtime, { ...meta.route })\n\t\t\t\tconst loaded: types.LoadedRouteMeta = { mod, meta }\n\n\t\t\t\t// Write to disk:\n\t\t\t\tconst out = await resolversText.renderRouteMetaToString(runtime, loaded)\n\t\t\t\tawait fs.mkdir(p.dirname(loaded.meta.route.dst), { recursive: true })\n\t\t\t\tawait fs.writeFile(loaded.meta.route.dst, out)\n\t\t\t}\n\n\t\t\t// Defer to esbuild:\n\t\t\tconst options = {\n\t\t\t\thostname: result.host,\n\t\t\t\tport: result.port,\n\t\t\t\tpath: utils.ssgify(req.url!),\n\t\t\t\tmethod: req.method,\n\t\t\t\theaders: req.headers,\n\t\t\t}\n\n\t\t\tconst reqProxy = http.request(options, (resProxy: http.IncomingMessage): void => {\n\t\t\t\t// Handle 404:\n\t\t\t\tif (resProxy.statusCode === 404) {\n\t\t\t\t\tres.writeHead(404, { \"Content-Type\": \"text/plain\" })\n\t\t\t\t\tres.end(\"404 - Not Found\")\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\t// Handle 200:\n\t\t\t\tres.writeHead(resProxy.statusCode!, resProxy.headers)\n\t\t\t\tresProxy.pipe(res, { end: true })\n\t\t\t})\n\t\t\treq.pipe(reqProxy, { end: true })\n\t\t},\n\t)\n\n\tsrvProxy.listen(runtime.command.port)\n}\n\n// // Read from the cache:\n// const stat = await fs.stat(req.url!)\n// const read = cache[req.url!]\n// if (read !== undefined && read.mtimeMs !== stat.mtimeMs) {\n// \tres.writeHead(200, { \"Content-Type\": \"text/html\" })\n// \tres.end(read.html)\n// \treturn\n// }\n\n// // Bad cache read; rerender and cache:\n// const html = await renderToString() // TODO\n// cache[req.url!] = {\n// \tmtimeMs: stat.mtimeMs,\n// \thtml,\n// }\n// // TODO: Emit a log event here (incl. read from the cache or not).\n// res.writeHead(200, { \"Content-Type\": \"text/html\" })\n// res.end(html)\n", "import * as esbuild from \"esbuild\"\nimport * as p from \"path\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\n\nconst TERM_WIDTH = 40\n\n// let once = false\n\nfunction timestamp(): string {\n\tconst date = new Date()\n\tconst hh = String(date.getHours() % 12 || 12).padStart(2, \"0\")\n\tconst mm = String(date.getMinutes()).padStart(2, \"0\")\n\tconst ss = String(date.getSeconds()).padStart(2, \"0\")\n\tconst am = date.getHours() < 12 ? \"AM\" : \"PM\"\n\tconst ms = String(date.getMilliseconds()).slice(0, 3).padStart(3, \"0\")\n\treturn `${hh}:${mm}:${ss}.${ms} ${am}`\n}\n\nfunction formatMs(ms: number): string {\n\tswitch (true) {\n\t\tcase ms < 250:\n\t\t\treturn `${ms}ms`\n\t\tdefault:\n\t\t\treturn `${(ms / 1e3).toFixed(2)}s`\n\t}\n}\n\nexport function export_(runtime: types.Runtime, meta: types.RouteMeta, start: number): void {\n\tconst dur = formatMs(Date.now() - start)\n\n\tconst l1 = runtime.directories.srcPagesDir.length\n\tconst l2 = runtime.directories.exportDir.length\n\n\tlet color = term.white\n\tif (meta.route.type === \"dynamic\") {\n\t\tcolor = term.cyan\n\t}\n\n\tlet dimColor = term.dim.white\n\tif (meta.route.type === \"dynamic\") {\n\t\tdimColor = term.dim.cyan\n\t}\n\n\tconst src = meta.route.src.slice(l1)\n\tconst src_ext = p.extname(src)\n\tconst src_name = src.slice(1, -src_ext.length)\n\n\tconst dst = meta.route.dst.slice(l2)\n\tconst dst_ext = p.extname(dst)\n\tconst dst_name = dst.slice(1, -dst_ext.length)\n\n\tconst sep = \"-\".repeat(Math.max(0, TERM_WIDTH - `/${src_name}${src_ext}\\x20`.length))\n\n\t// if (!once) {\n\t// \tconsole.log()\n\t// \tonce = true\n\t// }\n\tconsole.log(\n\t\t`\\x20${term.dim(timestamp())}\\x20\\x20` +\n\t\t\t`${dimColor(\"/\")}${color(src_name)}${dimColor(src_ext)} ${dimColor(sep)} ${dimColor(\"/\")}${color(dst_name)}${\n\t\t\t\tstart === 0 ? \"\" : ` ${dimColor(`(${dur})`)}`\n\t\t\t}`,\n\t)\n}\n\nexport function serve(args: esbuild.ServeOnRequestArgs): void {\n\ttype Logger = (...args: unknown[]) => void\n\n\tconst dur = formatMs(args.timeInMS)\n\n\tlet color = term.normal\n\tif (args.status < 200 || args.status >= 300) {\n\t\tcolor = term.red\n\t}\n\n\tlet dimColor = term.dim\n\tif (args.status < 200 || args.status >= 300) {\n\t\tdimColor = term.dim.red\n\t}\n\n\tlet logger: Logger = (...args) => console.log(...args)\n\tif (args.status < 200 || args.status >= 300) {\n\t\tlogger = (...args) => console.error(...args) // eslint-disable-line\n\t}\n\n\tconst path = args.path\n\tconst path_ext = p.extname(path)\n\tconst path_name = path.slice(1, -path_ext.length)\n\n\tconst sep = \"-\".repeat(Math.max(0, TERM_WIDTH - `/${path_name}${path_ext}\\x20`.length))\n\n\t// if (!once) {\n\t// \tconsole.log()\n\t// \tonce = true\n\t// }\n\tlogger(\n\t\t`\\x20${term.dim(timestamp())}\\x20\\x20` +\n\t\t\t`${dimColor(\"/\")}${color(path_name)}${dimColor(path_ext)} ${dimColor(sep)} ${color(args.status)} ${dimColor(\n\t\t\t\t`(${dur})`,\n\t\t\t)}`,\n\t)\n}\n", "import * as errors from \"./errors\"\nimport * as esbuild from \"esbuild\"\nimport * as events from \"./events\"\nimport * as fs from \"fs/promises\"\nimport * as log from \"../lib/log\"\nimport * as p from \"path\"\nimport * as resolversText from \"./resolvers-text\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\nimport * as utils from \"./utils\"\n\ninterface Formatter {\n\tstart(): void\n\tdone(): void\n}\n\nfunction formatter(): Formatter {\n\tlet once = false\n\treturn {\n\t\tstart(): void {\n\t\t\tif (once) return\n\t\t\tconsole.log()\n\t\t\tonce = true\n\t\t},\n\t\tdone(): void {\n\t\t\tconsole.log()\n\t\t},\n\t}\n}\n\nconst format = formatter()\n\nlet service: esbuild.Service\n\nexport async function resolveModule(\n\truntime: types.Runtime<types.DevCommand | types.ExportCommand>,\n\tpage: types.PageInfo,\n): Promise<types.PageModule> {\n\tconst target = p.join(runtime.directories.cacheDir, page.src.replace(/\\.*$/, \".esbuild.js\"))\n\n\t// Cache components to an intermediary build artifact; component.esbuild.js.\n\t// These artifacts enable interop with Node.js because require doesn\u2019t\n\t// understand a) JSX and b) TypeScript.\n\t//\n\t// Previously, there was a prototype that used 'ts-node -T' that was simpler\n\t// but slower.\n\ttry {\n\t\t// Use 'external: [\"react\", \"react-dom\"]' to prevent a runtime React error:\n\t\t// You might have mismatching versions of React and the renderer (such as\n\t\t// React DOM).\n\t\tconst result = await service.build({\n\t\t\tbundle: true,\n\t\t\tdefine: {\n\t\t\t\t__DEV__: process.env.__DEV__!,\n\t\t\t\t\"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV!),\n\t\t\t},\n\t\t\tentryPoints: [page.src],\n\t\t\texternal: [\"react\", \"react-dom\"],\n\t\t\tformat: \"cjs\", // Use \"cjs\" to enable require(...)\n\t\t\tinject: [\"packages/retro/react-shim.js\"],\n\t\t\tloader: { \".js\": \"jsx\" },\n\t\t\tlogLevel: \"silent\", // TODO\n\t\t\toutfile: target,\n\t\t\t// plugins: [...configs.retro.plugins], // TODO\n\t\t})\n\t\tif (result.warnings.length > 0) {\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlog.warning(utils.formatEsbuildMessage(warning, term.yellow))\n\t\t\t}\n\t\t\tprocess.exit(1)\n\t\t}\n\t} catch (err) {\n\t\t// TODO: Differentiate esbuild errors.\n\t\tlog.error(utils.formatEsbuildMessage((err as esbuild.BuildFailure).errors[0]!, term.bold.red))\n\t}\n\n\tlet mod: types.PageModule = {}\n\n\t// Use try-catch to suppress esbuild dynamic import warning.\n\t// prettier-ignore\n\ttry { mod = require(p.join(\"..\", \"..\", target)) } catch {}\n\treturn mod\n}\n\nexport async function resolveStaticRoute(\n\truntime: types.Runtime<types.DevCommand | types.ExportCommand>,\n\tpage: types.StaticPageInfo,\n): Promise<types.LoadedRouteMeta> {\n\tlet props: types.RouteProps = { path: page.path }\n\n\t// Guard serverProps and serverPaths:\n\tconst mod = (await resolveModule(runtime, page)) as types.StaticPageModule\n\tif (\"serverProps\" in mod && typeof mod.serverProps !== \"function\") {\n\t\tlog.error(errors.serverPropsFunction(page.src))\n\t} else if (\"serverPaths\" in mod && typeof (mod as { [key: string]: unknown }).serverPaths === \"function\") {\n\t\tlog.error(errors.serverPathsMismatch(page.src))\n\t}\n\n\t// Resolve serverProps:\n\tif (typeof mod.serverProps === \"function\") {\n\t\ttry {\n\t\t\tconst serverProps = await mod.serverProps!()\n\t\t\tif (!utils.validateServerPropsReturn(serverProps)) {\n\t\t\t\tlog.error(errors.serverPropsReturn(page.src))\n\t\t\t}\n\t\t\tprops = {\n\t\t\t\t// @ts-ignore\n\t\t\t\tpath: page.path, // Add path (takes precedence)\n\t\t\t\t...serverProps,\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlog.error(`${page.src}.serverProps: ${err.message}`)\n\t\t}\n\t}\n\n\tconst loaded = { mod, meta: { route: page, props } }\n\treturn loaded\n}\n\nexport async function resolveDynamicRoutes(\n\truntime: types.Runtime<types.DevCommand | types.ExportCommand>,\n\tpage: types.DynamicPageInfo,\n): Promise<types.LoadedRouteMeta[]> {\n\tconst loaded: types.LoadedRouteMeta[] = []\n\n\t// Guard serverProps and serverPaths:\n\tconst mod = (await resolveModule(runtime, page)) as types.DynamicPageModule\n\tif (\"serverPaths\" in mod && typeof mod.serverPaths !== \"function\") {\n\t\tlog.error(errors.serverPathsFunction(page.src))\n\t} else if (\"serverProps\" in mod && typeof (mod as { [key: string]: unknown }).serverProps === \"function\") {\n\t\tlog.error(errors.serverPropsMismatch(page.src))\n\t}\n\n\t// Resolve serverPaths:\n\tif (typeof mod.serverPaths === \"function\") {\n\t\tlet paths: { path: string; props: types.Props }[] = []\n\t\ttry {\n\t\t\tpaths = await mod.serverPaths!()\n\t\t\tif (!utils.validateServerPathsReturn(paths)) {\n\t\t\t\tlog.error(errors.serverPathsReturn(page.src))\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlog.error(`${page.src}.serverPaths: ${err.message}`)\n\t\t}\n\n\t\tfor (const path of paths) {\n\t\t\tconst path_ = p.join(p.dirname(page.src).slice(runtime.directories.srcPagesDir.length), path.path)\n\t\t\tconst dst = p.join(runtime.directories.exportDir, path_ + \".html\")\n\t\t\tloaded.push({\n\t\t\t\tmod,\n\t\t\t\tmeta: {\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\troute: {\n\t\t\t\t\t\t...page,\n\t\t\t\t\t\tdst,         // Add dst\n\t\t\t\t\t\tpath: path_, // Add path\n\t\t\t\t\t},\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tpath: path_, // Add path (takes precedence)\n\t\t\t\t\t\t...path.props,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n\n\treturn loaded\n}\n\n// resolveRouter resolves serverProps and serverPaths and generates the server-\n// resolved router.\n//\n// TODO: Extract middleware so loggers can be externalized?\nexport async function resolveRouter(\n\truntime: types.Runtime<types.DevCommand | types.ExportCommand>,\n): Promise<types.Router> {\n\tconst router: types.Router = {}\n\n\t// TODO: Add --concurrent?\n\tservice = await esbuild.startService()\n\tfor (const page of runtime.pages) {\n\t\tlet start = Date.now()\n\n\t\tconst loaded: types.LoadedRouteMeta[] = []\n\t\tif (page.type === \"static\") {\n\t\t\tconst one = await resolveStaticRoute(runtime, page)\n\t\t\tloaded.push(one)\n\t\t} else {\n\t\t\tconst many = await resolveDynamicRoutes(runtime, page)\n\t\t\tloaded.push(...many)\n\t\t}\n\n\t\tfor (const each of loaded) {\n\t\t\tif (router[each.meta.route.path] !== undefined) {\n\t\t\t\tlog.error(errors.duplicatePathFound(each.meta.route, router[each.meta.route.path]!.route))\n\t\t\t}\n\t\t\tformat.start()\n\t\t\trouter[each.meta.route.path] = each.meta\n\n\t\t\t// Write to disk:\n\t\t\tif (runtime.command.type === \"export\") {\n\t\t\t\tconst out = await resolversText.renderRouteMetaToString(runtime, each)\n\t\t\t\tawait fs.mkdir(p.dirname(each.meta.route.dst), { recursive: true })\n\t\t\t\tawait fs.writeFile(each.meta.route.dst, out)\n\t\t\t}\n\n\t\t\tevents.export_(runtime, each.meta, start)\n\t\t\tstart = 0 // Reset\n\t\t}\n\t}\n\n\tformat.done()\n\treturn router\n}\n", "import * as log from \"../lib/log\"\nimport * as React from \"react\"\nimport * as ReactDOMServer from \"react-dom/server\"\nimport * as types from \"./types\"\nimport * as utils from \"./utils\"\n\n// TODO: Add support for <Layout> components.\n// TODO: Write tests.\nexport async function renderRouteMetaToString(runtime: types.Runtime, loaded: types.LoadedRouteMeta): Promise<string> {\n\tlet head = \"<!-- <Head> -->\"\n\ttry {\n\t\tif (typeof loaded.mod.Head === \"function\") {\n\t\t\tconst renderString = ReactDOMServer.renderToStaticMarkup(React.createElement(loaded.mod.Head, loaded.meta.props))\n\t\t\thead = renderString.replace(/></g, \">\\n\\t\\t<\").replace(/\\/>/g, \" />\")\n\t\t}\n\t} catch (err) {\n\t\tlog.error(`${loaded.meta.route.src}.<Head>: ${err.message}`)\n\t}\n\n\t// TODO: Upgrade <script src=\"/app.js\"> to <script src=\"/app.[hash].js\">?\n\tlet page = `<noscript>You need to enable JavaScript to run this app.</noscript>\\n\\t\\t<div id=\"root\"></div>\\n\\t\\t<script src=\"/app.js\"></script>`\n\ttry {\n\t\tif (typeof loaded.mod.default === \"function\") {\n\t\t\tconst renderString = ReactDOMServer.renderToString(React.createElement(loaded.mod.default, loaded.meta.props))\n\t\t\tpage = page.replace(`<div id=\"root\"></div>`, `<div id=\"root\">${renderString}</div>`)\n\t\t}\n\t} catch (err) {\n\t\tlog.error(`${loaded.meta.route.src}.<Page>: ${err.message}`)\n\t}\n\n\tconst out = runtime.document\n\t\t.replace(\"%head%\", head) // %head% -> <Head>\n\t\t.replace(\"%page%\", page) // %page% -> <Page>\n\treturn out\n}\n\n// TODO: Add support for <Layout> components.\n// TODO: Write tests.\nexport async function renderRouterToString(runtime: types.Runtime): Promise<string> {\n\tconst distinctComponents = [...new Set(runtime.pages.map(each => each.component))] // TODO: Change to router?\n\n\tconst distinctRoutes = runtime.pages\n\t\t.filter(route => distinctComponents.includes(route.component))\n\t\t.sort((a, b) => a.component.localeCompare(b.component))\n\n\treturn `import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Route, Router } from \"../packages/router\"\n\n// Components\n${distinctRoutes.map(route => `import ${route.component} from \"../${route.src}\"`).join(\"\\n\")}\n\nexport default function App() {\n\treturn (\n\t\t<Router>\n${\n\tObject.entries(runtime.router)\n\t\t.map(\n\t\t\t([path, meta]) => `\n\t\t\t<Route path=\"${path}\">\n\t\t\t\t<${meta.route.component} {...${utils.prettyJSON(meta.props)}} />\n\t\t\t</Route>`,\n\t\t)\n\t\t.join(\"\\n\") + \"\\n\"\n}\n\t\t</Router>\n\t)\n}\n\n${\n\tJSON.parse(process.env.STRICT_MODE || \"true\")\n\t\t? `ReactDOM.${JSON.parse(process.env.RENDER || \"false\") ? \"render\" : \"hydrate\"}(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n)`\n\t\t: `ReactDOM.${JSON.parse(process.env.RENDER || \"false\") ? \"render\" : \"hydrate\"}(\n\t<App />,\n\tdocument.getElementById(\"root\"),\n)`\n}\n` // EOF\n}\n", "import * as errors from \"./errors\"\nimport * as fs from \"fs/promises\"\nimport * as log from \"../lib/log\"\nimport * as p from \"path\"\nimport * as resolvers from \"./resolvers\"\nimport * as types from \"./types\"\n\nimport parsePages from \"./pages\"\n\n// runServerGuards tests for the presence of runtime directories and\n// public/index.html.\nasync function runServerGuards(directories: types.DirConfiguration): Promise<void> {\n\t// prettier-ignore\n\tconst dirs = [\n\t\tdirectories.publicDir,\n\t\tdirectories.srcPagesDir,\n\t\tdirectories.cacheDir,\n\t\tdirectories.exportDir,\n\t]\n\n\t// Guard directories:\n\tfor (const dir of dirs) {\n\t\ttry {\n\t\t\tawait fs.stat(dir)\n\t\t} catch (_) {\n\t\t\tfs.mkdir(dir, { recursive: true })\n\t\t}\n\t}\n\n\t// Guard public/index.html:\n\tconst path = p.join(directories.publicDir, \"index.html\")\n\ttry {\n\t\tconst data = await fs.readFile(path)\n\t\tconst text = data.toString()\n\t\tif (!text.includes(\"%head\")) {\n\t\t\tlog.error(errors.missingDocumentHeadTag(path))\n\t\t} else if (!text.includes(\"%page\")) {\n\t\t\tlog.error(errors.missingDocumentPageTag(path))\n\t\t}\n\t} catch (_) {\n\t\tawait fs.writeFile(\n\t\t\tpath,\n\t\t\t`<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t%head%\n\t</head>\n\t<body>\n\t\t%page%\n\t</body>\n</html>\n`, // EOF\n\t\t)\n\t}\n}\n\nexport async function copyAll(src: string, dst: string, exclude: string[] = []): Promise<void> {\n\tconst directories: string[] = []\n\tconst files: string[] = []\n\n\t// Read directories and files:\n\tasync function recurse(entry: string): Promise<void> {\n\t\tif (exclude.includes(entry)) return\n\n\t\tconst stat = await fs.stat(entry)\n\t\tif (!stat.isDirectory()) {\n\t\t\tfiles.push(entry)\n\t\t} else {\n\t\t\tdirectories.push(entry)\n\t\t\tconst ls = await fs.readdir(entry)\n\t\t\tfor (const each of ls) {\n\t\t\t\tawait recurse(p.join(entry, each))\n\t\t\t}\n\t\t}\n\t}\n\tawait recurse(src)\n\n\t// Copy directories recursively and then copy files:\n\tfor (const directory of directories) await fs.mkdir(p.join(dst, directory.slice(src.length)), { recursive: true })\n\tfor (const file of files) await fs.copyFile(file, p.join(dst, file.slice(src.length)))\n}\n\nexport default async function preflight(runtime: types.Runtime<types.DevCommand | types.ExportCommand>): Promise<void> {\n\t// Run server guards:\n\tawait runServerGuards(runtime.directories)\n\n\t// Purge __export__:\n\tawait fs.rmdir(runtime.directories.exportDir, { recursive: true })\n\tawait copyAll(runtime.directories.publicDir, p.join(runtime.directories.exportDir, runtime.directories.publicDir), [\n\t\tp.join(runtime.directories.publicDir, \"index.html\"),\n\t])\n\n\t// Resolve runtime.document and runtime.pages:\n\tconst data = await fs.readFile(p.join(runtime.directories.publicDir, \"index.html\"))\n\truntime.document = data.toString()\n\truntime.pages = await parsePages(runtime.directories)\n\n\t// Resolve runtime.router from runtime.pages:\n\t//\n\t// TODO: Implement '---cache' here.\n\truntime.router = await resolvers.resolveRouter(runtime)\n}\n", "import * as fs from \"fs/promises\"\nimport * as log from \"../lib/log\"\nimport * as p from \"path\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\n\n// prettier-ignore\ninterface ParsedPath {\n\tsrc:      string // e.g. \"path/to/basename.ext\"\n\tbasename: string // e.g. \"basename.ext\"\n\tname:     string // e.g. \"basename\"\n\text:      string // e.g. \".ext\"\n}\n\n// prettier-ignore\nconst supported: { [key: string]: boolean } = {\n\t\".js\":  true,\n\t\".jsx\": true,\n\t\".ts\":  true,\n\t\".tsx\": true,\n\t\".md\":  true, // TODO\n\t\".mdx\": true, // TODO\n}\n\n// parsePath parses path metadata so that syntax functions don\u2019t need to\n// re-parse path metadata.\nfunction parsePath(path: string): ParsedPath {\n\tconst basename = p.basename(path)\n\tconst ext = p.extname(path)\n\tconst name = basename.slice(0, -ext.length)\n\treturn { src: path, basename, name, ext }\n}\n\n// src/pages/index.js -> __export__/index.html\n//\n// TODO: Write tests.\nfunction dst(directories: types.DirConfiguration, path: ParsedPath): string {\n\tconst syntax = p.join(directories.exportDir, path.src.slice(directories.srcPagesDir.length))\n\treturn syntax.slice(0, -path.ext.length) + \".html\"\n}\n\n// \"src/pages/component.js\"          -> \"PageComponent\"\n// \"src/pages/nested/component.js\"   -> \"PageNestedComponent\"\n// \"src/pages/[component].js\"        -> \"DynamicPageComponent\"\n// \"src/pages/nested/[component].js\" -> \"DynamicPageNestedComponent\"\n//\n// TODO: Write tests.\nfunction toComponentSyntax(\n\tdirectories: types.DirConfiguration,\n\tparsed: ParsedPath,\n\t{ dynamic }: { dynamic: boolean },\n): string {\n\tlet path = toPathSyntax(directories, parsed)\n\tif (dynamic) {\n\t\t// Remove \"[\" and \"]\":\n\t\tpath = path.replace(dynamicRegex, \"$1$3\")\n\t}\n\tlet syntax = \"\"\n\tfor (const part of path.split(p.sep)) {\n\t\tif (!part.length) continue\n\t\tsyntax += part[0]!.toUpperCase() + part.slice(1)\n\t}\n\tsyntax = syntax || \"Index\"\n\treturn (dynamic ? \"DynamicPage\" : \"Page\") + syntax[0]!.toUpperCase() + syntax.slice(1)\n}\n\n// \"src/pages/index.js\"       -> \"/\"\n// \"src/pages/hello-world.js\" -> \"/hello-world\"\n//\n// TODO: Write tests.\nfunction toPathSyntax(directories: types.DirConfiguration, parsed: ParsedPath): string {\n\tconst syntax = parsed.src.slice(directories.srcPagesDir.length, -parsed.ext.length)\n\tif (syntax.endsWith(\"/index\")) {\n\t\treturn syntax.slice(0, -\"index\".length)\n\t}\n\treturn syntax\n}\n\n// TODO: Write tests.\nfunction createStaticPageMeta(directories: types.DirConfiguration, parsed: ParsedPath): types.StaticPageInfo {\n\tconst component: types.StaticPageInfo = {\n\t\ttype: \"static\",\n\t\tsrc: parsed.src,\n\t\tdst: dst(directories, parsed),\n\t\tpath: toPathSyntax(directories, parsed),\n\t\tcomponent: toComponentSyntax(directories, parsed, { dynamic: false }),\n\t}\n\treturn component\n}\n\n// TODO: Write tests.\nfunction createDynamicPageMeta(directories: types.DirConfiguration, parsed: ParsedPath): types.DynamicPageInfo {\n\tconst component: types.DynamicPageInfo = {\n\t\ttype: \"dynamic\",\n\t\tsrc: parsed.src,\n\t\tcomponent: toComponentSyntax(directories, parsed, { dynamic: true }),\n\t}\n\treturn component\n}\n\n// Matches:\n//\n// - $1 -> \"/\"\n// - $2 -> \"[\"\n// - $3 -> ...\n// - $4 -> \"]\"\n//\n// TODO: Write tests.\nconst dynamicRegex = /(\\/)(\\[)([a-zA-Z0-9\\-\\.\\_\\~\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]+)(\\])/\n\nfunction parsePage(directories: types.DirConfiguration, parsed: ParsedPath): types.PageInfo {\n\tconst path = toPathSyntax(directories, parsed)\n\tif (dynamicRegex.test(path)) {\n\t\treturn createDynamicPageMeta(directories, parsed)\n\t}\n\treturn createStaticPageMeta(directories, parsed)\n}\n\nasync function readdirAll(src: string): Promise<ParsedPath[]> {\n\tconst arr: ParsedPath[] = []\n\tasync function recurse(src: string): Promise<void> {\n\t\tconst ls = await fs.readdir(src)\n\t\tfor (const each of ls) {\n\t\t\tconst path = p.join(src, each)\n\t\t\tif ((await fs.stat(path)).isDirectory()) {\n\t\t\t\tarr.push(parsePath(path))\n\t\t\t\tawait recurse(path)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tarr.push(parsePath(path))\n\t\t}\n\t}\n\tawait recurse(src)\n\treturn arr\n}\n\n// testURICharacter tests whether a character matches URI reserved or unreserved\n// characters based on RFC 3986.\nfunction testURICharacter(char: string): boolean {\n\t// prettier-ignore\n\tif ((char >= \"a\" && char <= \"z\") || // ALPHA LOWER\n\t\t\t(char >= \"A\" && char <= \"Z\") || // ALPHA LOWER\n\t\t\t(char >= \"0\" && char <= \"9\")) { // DIGIT\n\t\treturn true\n\t}\n\t// https://tools.ietf.org/html/rfc3986#section-2.3\n\tswitch (char) {\n\t\tcase \"-\":\n\t\tcase \".\":\n\t\tcase \"_\":\n\t\tcase \"~\":\n\t\t\treturn true\n\t}\n\t// https://tools.ietf.org/html/rfc3986#section-2.2\n\tswitch (char) {\n\t\tcase \":\":\n\t\tcase \"/\":\n\t\tcase \"?\":\n\t\tcase \"#\":\n\t\tcase \"[\":\n\t\tcase \"]\":\n\t\tcase \"@\":\n\t\tcase \"!\":\n\t\tcase \"$\":\n\t\tcase \"&\":\n\t\tcase \"'\":\n\t\tcase \"(\":\n\t\tcase \")\":\n\t\tcase \"*\":\n\t\tcase \"+\":\n\t\tcase \",\":\n\t\tcase \";\":\n\t\tcase \"=\":\n\t\t\treturn true\n\t}\n\treturn false\n}\n\nexport default async function parsePages(directories: types.DirConfiguration): Promise<types.PageInfo[]> {\n\tconst arr = await readdirAll(directories.srcPagesDir)\n\n\t// Step over:\n\t//\n\t// - \"_component\"\n\t// - \"$component\"\n\t// - \"component_\"\n\t// - \"component$\"\n\t//\n\t// TODO: Add support for <Layout> components.\n\tconst arr2 = arr.filter(path => {\n\t\tif (path.name.startsWith(\"_\") || path.name.startsWith(\"$\")) {\n\t\t\treturn false\n\t\t} else if (path.name.endsWith(\"_\") || path.name.endsWith(\"$\")) {\n\t\t\treturn false\n\t\t}\n\t\treturn supported[path.ext] === true\n\t})\n\n\tconst badSrcs: string[] = []\n\tfor (const { src } of arr2) {\n\t\tfor (let x = 0; x < src.length; x++) {\n\t\t\tif (!testURICharacter(src[x]!)) {\n\t\t\t\tbadSrcs.push(src)\n\t\t\t}\n\t\t}\n\t}\n\n\tif (badSrcs.length > 0) {\n\t\t// TODO: Extract to errors?\n\t\tlog.error(`These pages use non-URI characters:\n\n${badSrcs.map(each => \"- \" + each).join(\"\\n\")}\n\nURI characters are described by RFC 3986:\n\n2.2. Unreserved Characters\n\n\tALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\n2.3. Reserved Characters\n\n\tgen-delims = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" /\n\tsub-delims = \"@\" / \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n\t           / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n${term.underline.cyan(\"https://tools.ietf.org/html/rfc3986\")}`)\n\t}\n\n\tconst pages: types.PageInfo[] = []\n\tfor (const parsed of arr2) {\n\t\tpages.push(parsePage(directories, parsed))\n\t}\n\treturn pages\n}\n", "import * as esbuild from \"esbuild\"\nimport * as fs from \"fs/promises\"\nimport * as log from \"../lib/log\"\nimport * as p from \"path\"\nimport * as resolversText from \"./resolvers-text\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\nimport * as utils from \"./utils\"\n\nimport preflight from \"./preflight\"\n\nexport default async function cmd_export(runtime: types.Runtime<types.ExportCommand>): Promise<void> {\n\tawait preflight(runtime)\n\n\tconst appContents = await resolversText.renderRouterToString(runtime)\n\tconst appContentsPath = p.join(runtime.directories.cacheDir, \"app.js\")\n\tawait fs.writeFile(appContentsPath, appContents)\n\n\ttry {\n\t\tconst result = await esbuild.build({\n\t\t\tbundle: true,\n\t\t\tdefine: {\n\t\t\t\t__DEV__: process.env.__DEV__!,\n\t\t\t\t\"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV),\n\t\t\t},\n\t\t\tentryPoints: [appContentsPath],\n\t\t\tinject: [\"packages/retro/react-shim.js\"],\n\t\t\tloader: { \".js\": \"jsx\" },\n\t\t\tlogLevel: \"silent\", // TODO\n\t\t\tminify: true,\n\t\t\toutfile: p.join(runtime.directories.exportDir, appContentsPath.slice(runtime.directories.srcPagesDir.length)),\n\t\t\t// plugins: [...configs.retro.plugins], // TODO\n\t\t})\n\t\t// TODO: Add support for hints.\n\t\tif (result.warnings.length > 0) {\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlog.warning(utils.formatEsbuildMessage(warning, term.yellow))\n\t\t\t}\n\t\t\tprocess.exit(1)\n\t\t}\n\t} catch (err) {\n\t\t// TODO: Differentiate esbuild errors.\n\t\tlog.error(utils.formatEsbuildMessage((err as esbuild.BuildFailure).errors[0]!, term.bold.red))\n\t}\n}\n", "import * as errors from \"./errors\"\nimport * as esbuild from \"esbuild\"\nimport * as events from \"./events\"\nimport * as fs from \"fs/promises\"\nimport * as http from \"http\"\nimport * as log from \"../lib/log\"\nimport * as types from \"./types\"\nimport * as utils from \"./utils\"\n\n// This implementation is roughly based on:\n//\n// - https://esbuild.github.io/api/#customizing-server-behavior\n// - https://github.com/evanw/esbuild/issues/858#issuecomment-782814216\n//\nexport default async function cmd_serve(runtime: types.Runtime<types.ServeCommand>): Promise<void> {\n\ttry {\n\t\tawait fs.stat(\"__export__\")\n\t} catch {\n\t\tlog.error(errors.serveWithoutExport)\n\t}\n\n\t// prettier-ignore\n\tconst result = await esbuild.serve({\n\t\tservedir: runtime.directories.exportDir,\n\t\tonRequest: (args: esbuild.ServeOnRequestArgs) => events.serve(args),\n\t}, {})\n\n\tconst srvProxy = http.createServer((req: http.IncomingMessage, res: http.ServerResponse): void => {\n\t\tconst options = {\n\t\t\thostname: result.host,\n\t\t\tport: result.port,\n\t\t\tpath: utils.ssgify(req.url!),\n\t\t\tmethod: req.method,\n\t\t\theaders: req.headers,\n\t\t}\n\t\tconst reqProxy = http.request(options, (resProxy: http.IncomingMessage): void => {\n\t\t\t// Handle 404:\n\t\t\tif (resProxy.statusCode === 404) {\n\t\t\t\tres.writeHead(404, { \"Content-Type\": \"text/plain\" })\n\t\t\t\tres.end(\"404 - Not Found\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Handle 200:\n\t\t\tres.writeHead(resProxy.statusCode!, resProxy.headers)\n\t\t\tresProxy.pipe(res, { end: true })\n\t\t})\n\t\treq.pipe(reqProxy, { end: true })\n\t})\n\tsrvProxy.listen(runtime.command.port)\n}\n", "import * as log from \"../lib/log\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\n\ninterface CLI {\n\tparseDevCommand(): types.DevCommand\n\tparseExportCommand(): types.ExportCommand\n\tparseServeCommand(): types.ServeCommand\n}\n\n// newCLI creates a new CLI that parses commands.\nexport default function newCLI(...args: string[]): CLI {\n\treturn {\n\t\t// parseDevCommand parses the dev command; 'retro dev ...'.\n\t\tparseDevCommand(): types.DevCommand {\n\t\t\tconst command: types.DevCommand = {\n\t\t\t\ttype: \"dev\",\n\t\t\t\tcached: false,\n\t\t\t\tsourcemap: true,\n\t\t\t\tport: 8000,\n\t\t\t}\n\t\t\tlet badCommand = \"\"\n\t\t\tfor (const arg of args) {\n\t\t\t\tif (arg.startsWith(\"--cached\")) {\n\t\t\t\t\tif (arg === \"--cached\") {\n\t\t\t\t\t\tcommand.cached = true\n\t\t\t\t\t} else if (arg === \"--cached=true\" || arg === \"--cached=false\") {\n\t\t\t\t\t\tcommand.cached = JSON.parse(arg.slice(\"--cached=\".length))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbadCommand = \"--cached\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else if (arg.startsWith(\"--sourcemap\")) {\n\t\t\t\t\tif (arg === \"--sourcemap\") {\n\t\t\t\t\t\tcommand.sourcemap = true\n\t\t\t\t\t} else if (arg === \"--sourcemap=true\" || arg === \"--sourcemap=false\") {\n\t\t\t\t\t\tcommand.sourcemap = JSON.parse(arg.slice(\"--sourcemap=\".length))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbadCommand = \"--sourcemap\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else if (arg.startsWith(\"--port\")) {\n\t\t\t\t\tif (/^--port=\\d+$/.test(arg)) {\n\t\t\t\t\t\tcommand.port = JSON.parse(arg.slice(\"--port=\".length))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbadCommand = \"--port\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbadCommand = arg\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (badCommand !== \"\") {\n\t\t\t\tlog.error(`Bad command ${term.magenta(`'${badCommand}'`)}. Use ${term.magenta(\"'retro help'\")} for help.`)\n\t\t\t}\n\t\t\tif (command.port < 1e3 || command.port >= 1e4) {\n\t\t\t\tlog.error(`${term.magenta(\"'--port'\")} must be between 1000-9999.`)\n\t\t\t}\n\t\t\treturn command\n\t\t},\n\n\t\t// parseExportCommand parses the export command; 'retro export ...'.\n\t\tparseExportCommand(): types.ExportCommand {\n\t\t\tconst command: types.ExportCommand = {\n\t\t\t\ttype: \"export\",\n\t\t\t\tcached: false,\n\t\t\t\tsourcemap: true,\n\t\t\t}\n\t\t\tlet badCommand = \"\"\n\t\t\tfor (const arg of args) {\n\t\t\t\tif (arg.startsWith(\"--cached\")) {\n\t\t\t\t\tif (arg === \"--cached\") {\n\t\t\t\t\t\tcommand.cached = true\n\t\t\t\t\t} else if (arg === \"--cached=true\" || arg === \"--cached=false\") {\n\t\t\t\t\t\tcommand.cached = JSON.parse(arg.slice(\"--cached=\".length))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbadCommand = \"--cached\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else if (arg.startsWith(\"--sourcemap\")) {\n\t\t\t\t\tif (arg === \"--sourcemap\") {\n\t\t\t\t\t\tcommand.sourcemap = true\n\t\t\t\t\t} else if (arg === \"--sourcemap=true\" || arg === \"--sourcemap=false\") {\n\t\t\t\t\t\tcommand.sourcemap = JSON.parse(arg.slice(\"--sourcemap=\".length))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbadCommand = \"--sourcemap\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbadCommand = arg\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (badCommand !== \"\") {\n\t\t\t\tlog.error(`Bad command ${term.magenta(`'${badCommand}'`)}. Use ${term.magenta(\"'retro help'\")} for help.`)\n\t\t\t}\n\t\t\treturn command\n\t\t},\n\n\t\t// parseServeCommand parses the serve command; 'retro serve ...'.\n\t\tparseServeCommand(): types.ServeCommand {\n\t\t\tconst command: types.ServeCommand = {\n\t\t\t\ttype: \"serve\",\n\t\t\t\tmode: \"ssg\",\n\t\t\t\tport: 8000,\n\t\t\t}\n\t\t\tlet badCommand = \"\"\n\t\t\tfor (const arg of args) {\n\t\t\t\tif (arg.startsWith(\"--mode\")) {\n\t\t\t\t\tif (arg === \"--mode=spa\") {\n\t\t\t\t\t\tcommand.mode = \"spa\"\n\t\t\t\t\t} else if (arg === \"--mode=ssg\") {\n\t\t\t\t\t\tcommand.mode = \"ssg\"\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbadCommand = \"--mode\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else if (arg.startsWith(\"--port\")) {\n\t\t\t\t\tif (/^--port=\\d+$/.test(arg)) {\n\t\t\t\t\t\tcommand.port = JSON.parse(arg.slice(\"--port=\".length))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbadCommand = \"--port\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbadCommand = arg\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (badCommand !== \"\") {\n\t\t\t\tlog.error(`Bad command ${term.magenta(`'${badCommand}'`)}. Use ${term.magenta(\"'retro help'\")} for help.`)\n\t\t\t}\n\t\t\tif (command.port < 1e3 || command.port >= 1e4) {\n\t\t\t\tlog.error(`${term.magenta(\"'--port'\")} must be between 1000-9999.`)\n\t\t\t}\n\t\t\treturn command\n\t\t},\n\t}\n}\n", "import * as errors from \"./errors\"\nimport * as log from \"../lib/log\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\nimport * as utils from \"./utils\"\n\nimport cmd_dev from \"./cmd_dev\"\nimport cmd_export from \"./cmd_export\"\nimport cmd_serve from \"./cmd_serve\"\nimport newCLI from \"./cli\"\n\n// space converts tabs to one space; \"\\x20\".\nfunction space(str: string): string {\n\treturn str\n\t\t.split(\"\\n\")\n\t\t.map(each => {\n\t\t\tif (each.length === 0) return\n\t\t\treturn each.replace(\"\\t\", \"\\x20\") // \"\\t\" -> \"\\x20\"\n\t\t})\n\t\t.join(\"\\n\")\n}\n\nconst usage = space(`\n\t${term.bold(\"Usage:\")}\n\n\t\tretro dev          Start the dev server\n\t\tretro export       Export the production-ready build (SSG)\n\t\tretro serve        Serve the production-ready build\n\n\t${term.bold(\"retro dev\")}\n\n\t\tStart the dev server\n\n\t\t\t--cached=...     Use cached resources (default false)\n\t\t\t--sourcemap=...  Add source maps (default true)\n\t\t\t--mode=...       Serve mode 'spa' or 'ssg' (default 'ssg') (experimental)\n\t\t\t--port=...       Port number (default 8000)\n\n\t${term.bold(\"retro export\")}\n\n\t\tExport the production-ready build (SSG)\n\n\t\t\t--cached=...     Use cached resources (default false)\n\t\t\t--sourcemap=...  Add source maps (default true)\n\n\t${term.bold(\"retro serve\")}\n\n\t\tServe the production-ready build\n\n\t\t\t--mode=...       Serve mode 'spa' or 'ssg' (default 'ssg') (experimental)\n\t\t\t--port=...       Port number (default 8000)\n\n\t${term.bold(\"Repository\")}\n\n\t\t${term.bold.underline.cyan(\"https://github.com/zaydek/retro\")}\n`)\n\nasync function main(): Promise<void> {\n\tconst argv = process.argv\n\tif (process.argv0 === \"node\") {\n\t\targv.shift()\n\t}\n\n\tlet runCommand = \"usage\"\n\tif (argv.length >= 2) {\n\t\trunCommand = argv[1]!\n\t}\n\n\tconst cli = newCLI(...argv.slice(2))\n\n\tlet command: types.Command\n\tswitch (runCommand) {\n\t\t// Version:\n\t\tcase \"version\":\n\t\tcase \"--version\":\n\t\tcase \"--v\":\n\t\t\tconsole.log(process.env[\"RETRO_VERSION\"] ?? \"TODO\")\n\t\t\tprocess.exit(0)\n\t\tcase \"usage\":\n\t\tcase \"--usage\":\n\t\t\tconsole.log(usage)\n\t\t\tprocess.exit(0)\n\t\tcase \"help\":\n\t\tcase \"--help\":\n\t\t\tconsole.log(usage)\n\t\t\tprocess.exit(0)\n\t\tcase \"dev\":\n\t\t\tutils.setEnvDevelopment()\n\t\t\tcommand = cli.parseDevCommand()\n\t\t\tbreak\n\t\tcase \"export\":\n\t\t\tutils.setEnvProduction()\n\t\t\tcommand = cli.parseExportCommand()\n\t\t\tbreak\n\t\tcase \"serve\":\n\t\t\tutils.setEnvProduction()\n\t\t\tcommand = cli.parseServeCommand()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tlog.error(errors.badCLIRunCommand(runCommand))\n\t\t\tbreak\n\t}\n\n\t// prettier-ignore\n\tconst runtime: types.Runtime = {\n\t\tcommand: command!,\n\n\t\t// NOTE: Directories can be overridden as environmental variables. Retro\n\t\t// does not (yet?) support configuration files.\n\t\tdirectories: {\n\t\t\tpublicDir:   process.env.PUBLIC_DIR ?? \"public\",\n\t\t\tsrcPagesDir: process.env.PAGES_DIR  ?? \"src/pages\",\n\t\t\tcacheDir:    process.env.CACHE_DIR  ?? \"__cache__\",\n\t\t\texportDir:   process.env.EXPORT_DIR ?? \"__export__\",\n\t\t},\n\t\tdocument: \"\", // Defer to dev and export (preflight)\n\t\tpages:    [], // Defer to dev and export (preflight)\n\t\trouter:   {}, // Defer to dev and export (preflight)\n\t}\n\n\tif (runtime.command.type === \"dev\") {\n\t\tawait cmd_dev(runtime as types.Runtime<types.DevCommand>)\n\t} else if (runtime.command.type === \"export\") {\n\t\tawait cmd_export(runtime as types.Runtime<types.ExportCommand>)\n\t} else if (runtime.command.type === \"serve\") {\n\t\tawait cmd_serve(runtime as types.Runtime<types.ServeCommand>)\n\t}\n}\n\nprocess.on(\"uncaughtException\", (err: Error): void => {\n\tprocess.env[\"STACK_TRACE\"] = \"true\"\n\terr.message = `UncaughtException: ${err.message}`\n\tlog.error(err)\n})\n\nmain()\n"],
  "mappings": "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",
  "names": []
}
