{
  "version": 3,
  "sources": ["serve.ts"],
  "sourcesContent": ["import * as constants from \"constants\"\nimport * as fs from \"fs\"\nimport * as http from \"http\"\nimport * as p from \"path\"\n\nconst PORT = 3000\n\n// convertToFilesystemPath converts a browser path to a filesystem path.\nexport function convertToFilesystemPath(path: string) {\n\t// \"/\" -> \"/index\"\n\tlet path2 = path\n\tif (path2.endsWith(\"/\")) {\n\t\tpath2 += \"index\"\n\t}\n\t// \"/index\" -> \"/index.html\"\n\tif (p.extname(path2) === \"\") {\n\t\tpath2 += \".html\"\n\t}\n\treturn path2\n}\n\n// This implementation is loosely based on https://stackoverflow.com/a/44188852.\nfunction serve() {\n\tconst server = http.createServer(async (req, res) => {\n\t\tif (req.url! === \"/favicon.ico\") {\n\t\t\tres.writeHead(204)\n\t\t\treturn\n\t\t}\n\n\t\t// Convert the browser path to a filesystem path:\n\t\treq.url = convertToFilesystemPath(req.url!)\n\n\t\tlet bytes: Buffer\n\t\ttry {\n\t\t\tconst path = p.join(process.cwd(), req.url!)\n\t\t\tbytes = await fs.promises.readFile(path)\n\t\t} catch (err) {\n\t\t\tif (err.code === constants.ENOENT) {\n\t\t\t\tres.writeHead(404)\n\t\t\t\tres.end(http.STATUS_CODES[404])\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tres.writeHead(500)\n\t\t\t\tres.end(http.STATUS_CODES[500])\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\t// Done:\n\t\tres.writeHead(200)\n\t\tres.end(bytes!)\n\t})\n\n\tsetTimeout(() => {\n\t\tconsole.log(`\uD83D\uDCE1 http://localhost:${PORT}`)\n\t}, 100)\n\tserver.listen(PORT)\n}\n\nserve()\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA2B;AAC3B,SAAoB;AACpB,WAAsB;AACtB,QAAmB;AAEnB,MAAM,OAAO;AAGN,iCAAiC;AAEvC,MAAI,QAAQ;AACZ,MAAI,MAAM,SAAS;AAClB,aAAS;AAAA;AAGV,MAAI,EAAE,QAAQ,WAAW;AACxB,aAAS;AAAA;AAEV,SAAO;AAAA;AAIR;AACC,QAAM,SAAS,KAAK,aAAa,OAAO,KAAK;AAC5C,QAAI,IAAI,QAAS;AAChB,UAAI,UAAU;AACd;AAAA;AAID,QAAI,MAAM,wBAAwB,IAAI;AAEtC,QAAI;AACJ;AACC,YAAM,OAAO,EAAE,KAAK,QAAQ,OAAO,IAAI;AACvC,cAAQ,MAAM,GAAG,SAAS,SAAS;AAAA,aAC3B;AACR,UAAI,IAAI,SAAS,UAAU;AAC1B,YAAI,UAAU;AACd,YAAI,IAAI,KAAK,aAAa;AAC1B;AAAA;AAEA,YAAI,UAAU;AACd,YAAI,IAAI,KAAK,aAAa;AAC1B;AAAA;AAAA;AAIF,QAAI,UAAU;AACd,QAAI,IAAI;AAAA;AAGT,aAAW;AACV,YAAQ,IAAI,8BAAuB;AAAA,KACjC;AACH,SAAO,OAAO;AAAA;AAGf;",
  "names": []
}
