{
  "version": 3,
  "sources": ["serve.ts", "../lib/term.ts", "utils.ts"],
  "sourcesContent": ["import * as constants from \"constants\"\nimport * as fs from \"fs\"\nimport * as http from \"http\"\nimport * as p from \"path\"\nimport * as term from \"../lib/term\"\nimport * as utils from \"./utils\"\n\nconst PORT = 3000\n\n// convertToFilesystemPath converts a browser path to a filesystem path.\nexport function convertToFilesystemPath(path: string) {\n\t// \"/\" -> \"/index\"\n\tlet path2 = path\n\tif (path2.endsWith(\"/\")) {\n\t\tpath2 += \"index\"\n\t}\n\t// \"/index\" -> \"/index.html\"\n\tif (p.extname(path2) === \"\") {\n\t\tpath2 += \".html\"\n\t}\n\treturn path2\n}\n\n// This implementation is loosely based on https://stackoverflow.com/a/44188852.\nfunction serve() {\n\tconst server = http.createServer(async (req, res) => {\n\t\tif (req.url! === \"/favicon.ico\") {\n\t\t\tres.writeHead(204)\n\t\t\treturn\n\t\t}\n\n\t\t// Convert the browser path to a filesystem path:\n\t\treq.url = convertToFilesystemPath(req.url!)\n\n\t\tlet bytes: Buffer\n\t\ttry {\n\t\t\tconst path = p.join(process.cwd(), req.url!)\n\t\t\tbytes = await fs.promises.readFile(path)\n\t\t} catch (err) {\n\t\t\tif (err.code === constants.ENOENT) {\n\t\t\t\tres.writeHead(404)\n\t\t\t\tres.end(http.STATUS_CODES[404])\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tres.writeHead(500)\n\t\t\t\tres.end(http.STATUS_CODES[500])\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\t// Done:\n\t\tres.writeHead(200)\n\t\tres.end(bytes!)\n\t})\n\n\tsetTimeout(() => {\n\t\tutils.flushTerminal()\n\t\tconsole.log(`${term.gray(process.argv.join(\" \"))}\n\n\t${term.bold(\">\")} ${term.boldGreen(\"ok:\")} ${term.bold(\n\t\t\t`Serving your app on port ${PORT} (SSG); ${term.boldUnderline(`http://localhost:${PORT}`)}${term.bold(\".\")}`,\n\t\t)}\n\n\t${term.bold(`When you\u2019re ready to stop the server, press Ctrl-C.`)}\n`)\n\t}, 100)\n\tserver.listen(PORT)\n}\n\n// reportError reports an error message to the user.\nfunction reportError(err: Error) {\n\tif (process.env.STACK_TRACE !== \"true\") {\n\t\tconsole.error(`${term.gray(process.argv.join(\" \"))}\n\n  ${term.bold(\">\")} ${term.boldRed(\"error:\")} ${term.bold(err.message)}\n\n\t(Use STACK_TRACE=true ... to see the current stack trace)\n`)\n\t} else {\n\t\tconst stack = (err as { stack: string }).stack\n\t\t// prettier-ignore\n\t\tconsole.error(`${term.gray(process.argv.join(\" \"))}\n\n  ${term.bold(\">\")} ${term.boldRed(\"error:\")} ${term.bold(err.message)}\n\n\t${stack.split(\"\\n\").map(line => \" \".repeat(2) + line).join(\"\\n\")}\n`)\n\t}\n}\n\n;(() => {\n\ttry {\n\t\tserve()\n\t\t// throw new Error(\"Hello, world\")\n\t} catch (err) {\n\t\terr.message = \"Failed to serve your web app; \" + err.message\n\t\treportError(err)\n\t}\n})()\n", "export const none          = (...args: any) => args.join(\" \")\nexport const bold          = (...args: any) => `\\x1b[0;1m${args.join(\" \")}\\x1b[0m`\nexport const gray          = (...args: any) => `\\x1b[0;2m${args.join(\" \")}\\x1b[0m`\nexport const underline     = (...args: any) => `\\x1b[0;4m${args.join(\" \")}\\x1b[0m`\nexport const black         = (...args: any) => `\\x1b[0;30m${args.join(\" \")}\\x1b[0m`\nexport const red           = (...args: any) => `\\x1b[0;31m${args.join(\" \")}\\x1b[0m`\nexport const green         = (...args: any) => `\\x1b[0;32m${args.join(\" \")}\\x1b[0m`\nexport const yellow        = (...args: any) => `\\x1b[0;33m${args.join(\" \")}\\x1b[0m`\nexport const purple        = (...args: any) => `\\x1b[0;34m${args.join(\" \")}\\x1b[0m`\nexport const magenta       = (...args: any) => `\\x1b[0;35m${args.join(\" \")}\\x1b[0m`\nexport const teal          = (...args: any) => `\\x1b[0;36m${args.join(\" \")}\\x1b[0m`\nexport const white         = (...args: any) => `\\x1b[0;37m${args.join(\" \")}\\x1b[0m`\nexport const boldUnderline = (...args: any) => `\\x1b[1;4m${args.join(\" \")}\\x1b[0m`\nexport const boldBlack     = (...args: any) => `\\x1b[1;30m${args.join(\" \")}\\x1b[0m`\nexport const boldRed       = (...args: any) => `\\x1b[1;31m${args.join(\" \")}\\x1b[0m`\nexport const boldGreen     = (...args: any) => `\\x1b[1;32m${args.join(\" \")}\\x1b[0m`\nexport const boldYellow    = (...args: any) => `\\x1b[1;33m${args.join(\" \")}\\x1b[0m`\nexport const boldPurple    = (...args: any) => `\\x1b[1;34m${args.join(\" \")}\\x1b[0m`\nexport const boldMagenta   = (...args: any) => `\\x1b[1;35m${args.join(\" \")}\\x1b[0m`\nexport const boldTeal      = (...args: any) => `\\x1b[1;36m${args.join(\" \")}\\x1b[0m`\nexport const boldWhite     = (...args: any) => `\\x1b[1;37m${args.join(\" \")}\\x1b[0m`\n", "import readline from \"readline\"\n\n// https://gist.github.com/timneutkens/f2933558b8739bbf09104fb27c5c9664\nexport function flushTerminal() {\n\tconsole.log(\"\\n\".repeat(process.stdout.rows))\n\treadline.cursorTo(process.stdout, 0, 0)\n\treadline.clearScreenDown(process.stdout)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA2B;AAC3B,SAAoB;AACpB,WAAsB;AACtB,QAAmB;;;ACFZ,IAAM,OAAgB,IAAI,SAAc,SAAY,KAAK,KAAK;AAC9D,IAAM,OAAgB,IAAI,SAAc,SAAY,KAAK,KAAK;AAU9D,IAAM,gBAAgB,IAAI,SAAc,SAAY,KAAK,KAAK;AAE9D,IAAM,UAAgB,IAAI,SAAc,UAAa,KAAK,KAAK;AAC/D,IAAM,YAAgB,IAAI,SAAc,UAAa,KAAK,KAAK;;;ACftE,sBAAqB;AAGd;AACN,UAAQ,IAAI,KAAK,OAAO,QAAQ,OAAO;AACvC,0BAAS,SAAS,QAAQ,QAAQ,GAAG;AACrC,0BAAS,gBAAgB,QAAQ;AAAA;;;AFClC,IAAM,OAAO;AAGN,iCAAiC;AAEvC,MAAI,QAAQ;AACZ,MAAI,MAAM,SAAS;AAClB,aAAS;AAAA;AAGV,MAAI,AAAE,UAAQ,WAAW;AACxB,aAAS;AAAA;AAEV,SAAO;AAAA;AAIR;AACC,QAAM,SAAS,AAAK,kBAAa,OAAO,KAAK;AAC5C,QAAI,IAAI,QAAS;AAChB,UAAI,UAAU;AACd;AAAA;AAID,QAAI,MAAM,wBAAwB,IAAI;AAEtC,QAAI;AACJ;AACC,YAAM,OAAO,AAAE,OAAK,QAAQ,OAAO,IAAI;AACvC,cAAQ,MAAM,AAAG,YAAS,SAAS;AAAA,aAC3B;AACR,UAAI,IAAI,SAAmB;AAC1B,YAAI,UAAU;AACd,YAAI,IAAI,AAAK,kBAAa;AAC1B;AAAA;AAEA,YAAI,UAAU;AACd,YAAI,IAAI,AAAK,kBAAa;AAC1B;AAAA;AAAA;AAIF,QAAI,UAAU;AACd,QAAI,IAAI;AAAA;AAGT,aAAW;AACV,IAAM;AACN,YAAQ,IAAI,GAAG,AAAK,KAAK,QAAQ,KAAK,KAAK;AAAA;AAAA,GAE1C,AAAK,KAAK,QAAQ,AAAK,UAAU,UAAU,AAAK,KAChD,4BAA4B,eAAe,AAAK,cAAc,oBAAoB,UAAU,AAAK,KAAK;AAAA;AAAA,GAGtG,AAAK,KAAK;AAAA;AAAA,KAET;AACH,SAAO,OAAO;AAAA;AAIf,qBAAqB;AACpB,MAAI,QAAQ,IAAI,gBAAgB;AAC/B,YAAQ,MAAM,GAAG,AAAK,KAAK,QAAQ,KAAK,KAAK;AAAA;AAAA,IAE3C,AAAK,KAAK,QAAQ,AAAK,QAAQ,aAAa,AAAK,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAK5D,UAAM,QAAS,IAA0B;AAEzC,YAAQ,MAAM,GAAG,AAAK,KAAK,QAAQ,KAAK,KAAK;AAAA;AAAA,IAE3C,AAAK,KAAK,QAAQ,AAAK,QAAQ,aAAa,AAAK,KAAK,IAAI;AAAA;AAAA,GAE3D,MAAM,MAAM,MAAM,IAAI,UAAQ,IAAI,OAAO,KAAK,MAAM,KAAK;AAAA;AAAA;AAAA;AAK3D,AAAC;AACD;AACC;AAAA,WAEQ;AACR,QAAI,UAAU,mCAAmC,IAAI;AACrD,gBAAY;AAAA;AAAA;",
  "names": []
}
