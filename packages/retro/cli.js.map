{
  "version": 3,
  "sources": ["cli.ts", "../lib/term.ts", "../lib/log.ts", "serve.ts", "utils.ts"],
  "sourcesContent": ["import * as log from \"../lib/log\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\n\nimport { serve } from \"./serve\"\n\nexport const cmds = `\nretro dev     Start the dev server\nretro export  Export the production-ready build (SSG)\nretro serve   Serve the production-ready build\n`.trim()\n\nexport const usage =\n\t`${term.gray([process.argv0, ...process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\"Usage:\")}\n\n    retro dev     Start the dev server\n    retro export  Export the production-ready build (SSG)\n    retro serve   Serve the production-ready build\n\n  ${term.bold(\"retro dev\")}\n\n    Start the dev server\n\n      --cached=...         Use cached resources (default false)\n      --source-map=...     Add source maps (default true)\n      --port=<number>=...  Port number (default 8000)\n\n  ${term.bold(\"retro export\")}\n\n    Export the production-ready build (SSG)\n\n      --cached=...         Use cached resources (default false)\n      --source-map=...     Add source maps (default true)\n\n  ${term.bold(\"retro serve\")}\n\n    Serve the production-ready build\n\n      --port=...           Port number (default 8000)\n\n  ${term.bold(\"Repository:\")}\n\n    ` +\n\tterm.underline(\"https://github.com/zaydek/retro\") +\n\t`\n`\n\n// parseCmdDevArguments parses 'retro dev [flags]'.\n// TODO: Write tests.\nfunction parseCmdDevArguments(...args: string[]): types.CmdDev {\n\tconst cmd: types.CmdDev = {\n\t\ttype: \"dev\",\n\t\tcached: false,\n\t\tsourcemap: true,\n\t\tport: 8000,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--cached\")) {\n\t\t\tif (arg === \"--cached\") {\n\t\t\t\tcmd.cached = true\n\t\t\t} else if (arg === \"--cached=true\" || arg === \"--cached=false\") {\n\t\t\t\tcmd.cached = JSON.parse(arg.slice(\"--cached=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--cached\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--sourcemap\")) {\n\t\t\tif (arg === \"--sourcemap\") {\n\t\t\t\tcmd.sourcemap = true\n\t\t\t} else if (arg === \"--sourcemap=true\" || arg === \"--sourcemap=false\") {\n\t\t\t\tcmd.sourcemap = JSON.parse(arg.slice(\"--sourcemap=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--sourcemap\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--port\")) {\n\t\t\tif (/^--port=\\d+$/.test(arg)) {\n\t\t\t\tcmd.port = JSON.parse(arg.slice(\"--port=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--port\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command '${badCmd}'. You can use 'retro help' for help.`)\n\t}\n\tif (cmd.port < 1e3 || cmd.port >= 1e4) {\n\t\tlog.error(\"'--port' must be between 1000-9999.\")\n\t}\n\treturn cmd\n}\n\n// parseCmdDevArguments parses 'retro export [flags]'.\n// TODO: Write tests.\nfunction parseCmdExportArguments(...args: string[]): types.CmdExport {\n\tconst cmd: types.CmdExport = {\n\t\ttype: \"export\",\n\t\tcached: false,\n\t\tsourcemap: true,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--cached\")) {\n\t\t\tif (arg === \"--cached\") {\n\t\t\t\tcmd.cached = true\n\t\t\t} else if (arg === \"--cached=true\" || arg === \"--cached=false\") {\n\t\t\t\tcmd.cached = JSON.parse(arg.slice(\"--cached=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--cached\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--sourcemap\")) {\n\t\t\tif (arg === \"--sourcemap\") {\n\t\t\t\tcmd.sourcemap = true\n\t\t\t} else if (arg === \"--sourcemap=true\" || arg === \"--sourcemap=false\") {\n\t\t\t\tcmd.sourcemap = JSON.parse(arg.slice(\"--sourcemap=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--sourcemap\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command '${badCmd}'. You can use 'retro help' for help.`)\n\t}\n\treturn cmd\n}\n\n// parseCmdDevArguments parses 'retro serve [flags]'.\n// TODO: Write tests.\nfunction parseCmdServeArguments(...args: string[]): types.CmdServe {\n\tconst cmd: types.CmdServe = {\n\t\ttype: \"serve\",\n\t\tport: 8000,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--port\")) {\n\t\t\tif (/^--port=\\d+$/.test(arg)) {\n\t\t\t\tcmd.port = JSON.parse(arg.slice(\"--port=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--port\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command '${badCmd}'. You can use 'retro help' for help.`)\n\t}\n\tif (cmd.port < 1e3 || cmd.port >= 1e4) {\n\t\tlog.error(\"'--port' must be between 1000-9999.\")\n\t}\n\treturn cmd\n}\n\nfunction run(): void {\n\tconst args = process.argv0 === \"node\" ? process.argv.slice(1) : process.argv\n\n\t// Cover [\"retro\"] case:\n\tif (args.length === 1) {\n\t\tconsole.log(usage)\n\t\tprocess.exit(0)\n\t}\n\n\tlet cmd: types.Cmd\n\tconst arg = args[1]\n\tif (arg === \"version\" || arg === \"--version\" || arg === \"--v\") {\n\t\tconsole.log(process.env[\"RETRO_VERSION\"] || \"TODO\")\n\t\tprocess.exit(0)\n\t} else if (arg === \"usage\" || arg === \"--usage\" || arg === \"help\" || arg === \"--help\") {\n\t\tconsole.log(usage)\n\t\tprocess.exit(0)\n\t} else if (arg === \"dev\") {\n\t\tcmd = parseCmdDevArguments(...args.slice(2))\n\t} else if (arg === \"export\") {\n\t\tcmd = parseCmdExportArguments(...args.slice(2))\n\t} else if (arg === \"serve\") {\n\t\tcmd = parseCmdServeArguments(...args.slice(2))\n\t} else {\n\t\t// prettier-ignore\n\t\tlog.error(`Unrecognized command. Here are the commands you can use:\n\n${cmds.split(\"\\n\").map(each => \" \".repeat(2) + each).join(\"\\n\")}`)\n\t}\n\n\tswitch (cmd!.type) {\n\t\tcase \"dev\":\n\t\t\tprocess.env[\"__DEV__\"] = \"true\"\n\t\t\tprocess.env[\"NODE_ENV\"] = \"development\"\n\t\t\t// dev(cmd! as types.CmdDev)\n\t\t\tbreak\n\t\tcase \"export\":\n\t\t\tprocess.env[\"__DEV__\"] = \"false\"\n\t\t\tprocess.env[\"NODE_ENV\"] = \"production\"\n\t\t\t// export_(cmd! as types.CmdExport)\n\t\t\tbreak\n\t\tcase \"serve\":\n\t\t\tprocess.env[\"__DEV__\"] = \"false\"\n\t\t\tprocess.env[\"NODE_ENV\"] = \"production\"\n\t\t\tserve(cmd! as types.CmdServe)\n\t\t\tbreak\n\t}\n}\n\nrun()\n", "export const none          = (...args: unknown[]): string => args.join(\" \")\nexport const bold          = (...args: unknown[]): string => `\\x1b[0;1m${args.join(\" \")}\\x1b[0m`\nexport const gray          = (...args: unknown[]): string => `\\x1b[0;2m${args.join(\" \")}\\x1b[0m`\nexport const underline     = (...args: unknown[]): string => `\\x1b[0;4m${args.join(\" \")}\\x1b[0m`\nexport const black         = (...args: unknown[]): string => `\\x1b[0;30m${args.join(\" \")}\\x1b[0m`\nexport const red           = (...args: unknown[]): string => `\\x1b[0;31m${args.join(\" \")}\\x1b[0m`\nexport const green         = (...args: unknown[]): string => `\\x1b[0;32m${args.join(\" \")}\\x1b[0m`\nexport const yellow        = (...args: unknown[]): string => `\\x1b[0;33m${args.join(\" \")}\\x1b[0m`\nexport const purple        = (...args: unknown[]): string => `\\x1b[0;34m${args.join(\" \")}\\x1b[0m`\nexport const magenta       = (...args: unknown[]): string => `\\x1b[0;35m${args.join(\" \")}\\x1b[0m`\nexport const teal          = (...args: unknown[]): string => `\\x1b[0;36m${args.join(\" \")}\\x1b[0m`\nexport const white         = (...args: unknown[]): string => `\\x1b[0;37m${args.join(\" \")}\\x1b[0m`\nexport const boldUnderline = (...args: unknown[]): string => `\\x1b[1;4m${args.join(\" \")}\\x1b[0m`\nexport const boldBlack     = (...args: unknown[]): string => `\\x1b[1;30m${args.join(\" \")}\\x1b[0m`\nexport const boldRed       = (...args: unknown[]): string => `\\x1b[1;31m${args.join(\" \")}\\x1b[0m`\nexport const boldGreen     = (...args: unknown[]): string => `\\x1b[1;32m${args.join(\" \")}\\x1b[0m`\nexport const boldYellow    = (...args: unknown[]): string => `\\x1b[1;33m${args.join(\" \")}\\x1b[0m`\nexport const boldPurple    = (...args: unknown[]): string => `\\x1b[1;34m${args.join(\" \")}\\x1b[0m`\nexport const boldMagenta   = (...args: unknown[]): string => `\\x1b[1;35m${args.join(\" \")}\\x1b[0m`\nexport const boldTeal      = (...args: unknown[]): string => `\\x1b[1;36m${args.join(\" \")}\\x1b[0m`\nexport const boldWhite     = (...args: unknown[]): string => `\\x1b[1;37m${args.join(\" \")}\\x1b[0m`\n", "import * as term from \"./term\"\n\n// (Use STACK_TRACE=true ... to see the stack trace)\nexport function error(err: Error | string): void {\n\tconst STACK_TRACE = process.env[\"STACK_TRACE\"] === \"true\"\n\n\tif (typeof err === \"string\" || !STACK_TRACE) {\n\t\tconsole.error(`${term.gray([process.argv0, ...process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\">\")} ${term.boldRed(\"error:\")} ${term.bold(err)}\n`)\n\t} else {\n\t\tconst stack = (err as { stack: string }).stack\n\t\t// prettier-ignore\n\t\tconsole.error(`${term.gray([process.argv0, ...process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\">\")} ${term.boldRed(\"error:\")} ${term.bold(err.message)}\n\n\t${stack.split(\"\\n\").map(line => \" \".repeat(2) + line).join(\"\\n\")}\n`)\n\t}\n\tprocess.exit(0)\n}\n", "// import * as esbuild from \"esbuild\"\n// import * as log from \"../lib/log\"\n\nimport * as constants from \"constants\"\nimport * as fs from \"fs\"\nimport * as http from \"http\"\nimport * as p from \"path\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\nimport * as utils from \"./utils\"\n\nconst PORT = 3000\n\n// let errored = false\n//\n// function didError(): boolean {\n// \treturn errored\n// }\n\n// convertToFilesystemPath converts a browser path to a filesystem path.\nexport function convertToFilesystemPath(path: string): string {\n\t// \"/\" -> \"/index\"\n\tlet path2 = path\n\tif (path2.endsWith(\"/\")) {\n\t\tpath2 += \"index\"\n\t}\n\t// \"/index\" -> \"/index.html\"\n\tif (p.extname(path2) === \"\") {\n\t\tpath2 += \".html\"\n\t}\n\treturn path2\n}\n\n// This implementation is loosely based on https://stackoverflow.com/a/44188852.\n// TODO: Use the esbuild serve command?\nexport const serve: types.serve = (cmd: types.CmdServe): void => {\n\tconst server = http.createServer(\n\t\tasync (req, res): Promise<void> => {\n\t\t\tif (req.url === \"/favicon.ico\") {\n\t\t\t\tres.writeHead(204)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Convert the browser path to a filesystem path:\n\t\t\treq.url = convertToFilesystemPath(req.url!)\n\n\t\t\tlet bytes: Buffer\n\t\t\ttry {\n\t\t\t\tconst path = p.join(process.cwd(), req.url)\n\t\t\t\tbytes = await fs.promises.readFile(path)\n\t\t\t} catch (err) {\n\t\t\t\tif (err.code === constants.ENOENT) {\n\t\t\t\t\tres.writeHead(404)\n\t\t\t\t\tres.end(http.STATUS_CODES[404])\n\t\t\t\t\t// ...\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\tres.writeHead(500)\n\t\t\t\t\tres.end(http.STATUS_CODES[500])\n\t\t\t\t\t// ...\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Done:\n\t\t\tres.writeHead(200)\n\t\t\t// ...\n\t\t\tres.end(bytes)\n\t\t},\n\t)\n\n\tsetTimeout(() => {\n\t\t// if (didError()) return\n\t\tutils.clearScreen()\n\t\tconsole.log(`${term.gray([process.argv0, ...process.argv.slice(1)].join(\" \"))}\n\n\t${term.bold(\">\")} ${term.boldGreen(\"ok:\")} ${term.bold(\n\t\t\t`Serving your app on port ${PORT} (SSG); ${term.boldUnderline(`http://localhost:${PORT}`)}${term.bold(\".\")}`,\n\t\t)}\n\n\t${term.bold(`When you\u2019re ready to stop the server, press Ctrl-C.`)}\n`)\n\t}, 10)\n\tserver.listen(PORT)\n}\n\n// ;(() => {\n// \ttry {\n// \t\tserve()\n// \t} catch (err) {\n// \t\terrored = true\n// \t\terr.message = \"An unexpected error occurred while trying to serve your web app; \" + err.message\n// \t\tlog.error(err)\n// \t}\n// })()\n", "import readline from \"readline\"\n\n// https://gist.github.com/timneutkens/f2933558b8739bbf09104fb27c5c9664\nexport function clearScreen(): void {\n\tconsole.log(\"\\n\".repeat(process.stdout.rows))\n\treadline.cursorTo(process.stdout, 0, 0)\n\treadline.clearScreenDown(process.stdout)\n}\n"],
  "mappings": "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",
  "names": []
}
