{
  "version": 3,
  "sources": ["cli.ts", "../lib/term.ts", "../lib/log.ts"],
  "sourcesContent": ["import * as log from \"../lib/log\"\nimport * as term from \"../lib/term\"\nimport * as types from \"./types\"\n\nexport const cmds = `\nretro dev     Start the dev server\nretro export  Export the production-ready build (SSG)\nretro serve   Serve the production-ready build\n`.trim()\n\nexport const usage =\n\t`${term.gray([process.argv0, ...process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\"Usage:\")}\n\n    retro dev     Start the dev server\n    retro export  Export the production-ready build (SSG)\n    retro serve   Serve the production-ready build\n\n  ${term.bold(\"retro dev\")}\n\n    Start the dev server\n\n      --cached=...         Use cached resources (default false)\n      --source-map=...     Add source maps (default true)\n      --port=<number>=...  Port number (default 8000)\n\n  ${term.bold(\"retro export\")}\n\n    Export the production-ready build (SSG)\n\n      --cached=...         Use cached resources (default false)\n      --source-map=...     Add source maps (default true)\n\n  ${term.bold(\"retro serve\")}\n\n    Serve the production-ready build\n\n      --port=...           Port number (default 8000)\n\n  ${term.bold(\"Repository:\")}\n\n    ` +\n\tterm.underline(\"https://github.com/zaydek/retro\") +\n\t`\n`\n\n// parseCmdDevArguments parses 'retro dev [flags]'.\n// TODO: Write tests.\nfunction parseCmdDevArguments(...args: string[]) {\n\tconst cmd: types.CmdDev = {\n\t\tcached: false,\n\t\tsourcemap: true,\n\t\tport: 8000,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--cached\")) {\n\t\t\tif (arg === \"--cached\") {\n\t\t\t\tcmd.cached = true\n\t\t\t} else if (arg === \"--cached=true\" || \"--cached=false\") {\n\t\t\t\tcmd.cached = JSON.parse(arg.slice(\"--cached=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--cached\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--sourcemap\")) {\n\t\t\tif (arg === \"--sourcemap\") {\n\t\t\t\tcmd.sourcemap = true\n\t\t\t} else if (arg === \"--sourcemap=true\" || \"--sourcemap=false\") {\n\t\t\t\tcmd.sourcemap = JSON.parse(arg.slice(\"--sourcemap=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--sourcemap\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--port\")) {\n\t\t\tif (/^--port=\\d+$/.test(arg)) {\n\t\t\t\tcmd.port = JSON.parse(arg.slice(\"--port=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--port\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command '${badCmd}'. You can use 'retro help' for help.`)\n\t}\n\tif (cmd.port < 1e3 || cmd.port >= 1e4) {\n\t\tlog.error(\"'--port' must be between 1000-9999.\")\n\t}\n\treturn cmd\n}\n\n// parseCmdDevArguments parses 'retro export [flags]'.\n// TODO: Write tests.\nfunction parseCmdExportArguments(...args: string[]) {\n\tconst cmd: types.CmdExport = {\n\t\tcached: false,\n\t\tsourcemap: true,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--cached\")) {\n\t\t\tif (arg === \"--cached\") {\n\t\t\t\tcmd.cached = true\n\t\t\t} else if (arg === \"--cached=true\" || \"--cached=false\") {\n\t\t\t\tcmd.cached = JSON.parse(arg.slice(\"--cached=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--cached\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--sourcemap\")) {\n\t\t\tif (arg === \"--sourcemap\") {\n\t\t\t\tcmd.sourcemap = true\n\t\t\t} else if (arg === \"--sourcemap=true\" || \"--sourcemap=false\") {\n\t\t\t\tcmd.sourcemap = JSON.parse(arg.slice(\"--sourcemap=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--sourcemap\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command '${badCmd}'. You can use 'retro help' for help.`)\n\t}\n\treturn cmd\n}\n\n// parseCmdDevArguments parses 'retro serve [flags]'.\n// TODO: Write tests.\nfunction parseCmdServeArguments(...args: string[]) {\n\tconst cmd: types.CmdServe = {\n\t\tport: 8000,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--port\")) {\n\t\t\tif (/^--port=\\d+$/.test(arg)) {\n\t\t\t\tcmd.port = JSON.parse(arg.slice(\"--port=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--port\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command '${badCmd}'. You can use 'retro help' for help.`)\n\t}\n\tif (cmd.port < 1e3 || cmd.port >= 1e4) {\n\t\tlog.error(\"'--port' must be between 1000-9999.\")\n\t}\n\treturn cmd\n}\n\nfunction run() {\n\tconst args = process.argv0 === \"node\" ? process.argv.slice(1) : process.argv\n\n\t// Cover [\"retro\"] case:\n\tif (args.length === 1) {\n\t\tconsole.log(usage)\n\t\tprocess.exit(0)\n\t}\n\n\tlet cmd: types.Cmd\n\tconst arg = args[1]\n\tif (arg == \"version\" || arg == \"--version\" || arg == \"--v\") {\n\t\tconsole.log(process.env[\"RETRO_VERSION\"] || \"TODO\")\n\t\tprocess.exit(0)\n\t} else if (arg == \"usage\" || arg == \"--usage\" || arg == \"help\" || arg == \"--help\") {\n\t\tconsole.log(usage)\n\t\tprocess.exit(0)\n\t} else if (arg == \"dev\") {\n\t\tprocess.env[\"__DEV__\"] = \"true\"\n\t\tprocess.env[\"NODE_ENV\"] = \"development\"\n\t\tcmd = parseCmdDevArguments(...args.slice(2))\n\t} else if (arg == \"export\") {\n\t\tprocess.env[\"__DEV__\"] = \"false\"\n\t\tprocess.env[\"NODE_ENV\"] = \"production\"\n\t\tcmd = parseCmdExportArguments(...args.slice(2))\n\t} else if (arg == \"serve\") {\n\t\tprocess.env[\"__DEV__\"] = \"false\"\n\t\tprocess.env[\"NODE_ENV\"] = \"production\"\n\t\tcmd = parseCmdServeArguments(...args.slice(2))\n\t} else {\n\t\t// prettier-ignore\n\t\tlog.error(`Unrecognized command. These are the commands:\n\n${cmds.split(\"\\n\").map(each => \" \".repeat(2) + each).join(\"\\n\")}`)\n\t\tprocess.exit(2)\n\t}\n\n\tconsole.log(cmd)\n}\n\nrun()\n", "export const none          = (...args: any) => args.join(\" \")\nexport const bold          = (...args: any) => `\\x1b[0;1m${args.join(\" \")}\\x1b[0m`\nexport const gray          = (...args: any) => `\\x1b[0;2m${args.join(\" \")}\\x1b[0m`\nexport const underline     = (...args: any) => `\\x1b[0;4m${args.join(\" \")}\\x1b[0m`\nexport const black         = (...args: any) => `\\x1b[0;30m${args.join(\" \")}\\x1b[0m`\nexport const red           = (...args: any) => `\\x1b[0;31m${args.join(\" \")}\\x1b[0m`\nexport const green         = (...args: any) => `\\x1b[0;32m${args.join(\" \")}\\x1b[0m`\nexport const yellow        = (...args: any) => `\\x1b[0;33m${args.join(\" \")}\\x1b[0m`\nexport const purple        = (...args: any) => `\\x1b[0;34m${args.join(\" \")}\\x1b[0m`\nexport const magenta       = (...args: any) => `\\x1b[0;35m${args.join(\" \")}\\x1b[0m`\nexport const teal          = (...args: any) => `\\x1b[0;36m${args.join(\" \")}\\x1b[0m`\nexport const white         = (...args: any) => `\\x1b[0;37m${args.join(\" \")}\\x1b[0m`\nexport const boldUnderline = (...args: any) => `\\x1b[1;4m${args.join(\" \")}\\x1b[0m`\nexport const boldBlack     = (...args: any) => `\\x1b[1;30m${args.join(\" \")}\\x1b[0m`\nexport const boldRed       = (...args: any) => `\\x1b[1;31m${args.join(\" \")}\\x1b[0m`\nexport const boldGreen     = (...args: any) => `\\x1b[1;32m${args.join(\" \")}\\x1b[0m`\nexport const boldYellow    = (...args: any) => `\\x1b[1;33m${args.join(\" \")}\\x1b[0m`\nexport const boldPurple    = (...args: any) => `\\x1b[1;34m${args.join(\" \")}\\x1b[0m`\nexport const boldMagenta   = (...args: any) => `\\x1b[1;35m${args.join(\" \")}\\x1b[0m`\nexport const boldTeal      = (...args: any) => `\\x1b[1;36m${args.join(\" \")}\\x1b[0m`\nexport const boldWhite     = (...args: any) => `\\x1b[1;37m${args.join(\" \")}\\x1b[0m`\n", "import * as term from \"./term\"\n\n// (Use STACK_TRACE=true ... to see the stack trace)\nexport function error(err: Error | string) {\n\tconst STACK_TRACE = process.env[\"STACK_TRACE\"] === \"true\"\n\n\tif (typeof err === \"string\" || !STACK_TRACE) {\n\t\tconsole.error(`${term.gray([process.argv0, ...process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\">\")} ${term.boldRed(\"error:\")} ${term.bold(err)}\n`)\n\t} else {\n\t\tconst stack = (err as { stack: string }).stack\n\t\t// prettier-ignore\n\t\tconsole.error(`${term.gray([process.argv0, ...process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\">\")} ${term.boldRed(\"error:\")} ${term.bold(err.message)}\n\n\t${stack.split(\"\\n\").map(line => \" \".repeat(2) + line).join(\"\\n\")}\n`)\n\t}\n\tprocess.exit(0)\n}\n"],
  "mappings": "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",
  "names": []
}
