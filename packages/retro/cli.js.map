{
  "version": 3,
  "sources": ["../lib/term.ts", "../lib/log.ts", "cli-usage.ts", "cli.ts"],
  "sourcesContent": ["export const none          = (...args: any) => args.join(\" \")\nexport const bold          = (...args: any) => `\\x1b[0;1m${args.join(\" \")}\\x1b[0m`\nexport const gray          = (...args: any) => `\\x1b[0;2m${args.join(\" \")}\\x1b[0m`\nexport const underline     = (...args: any) => `\\x1b[0;4m${args.join(\" \")}\\x1b[0m`\nexport const black         = (...args: any) => `\\x1b[0;30m${args.join(\" \")}\\x1b[0m`\nexport const red           = (...args: any) => `\\x1b[0;31m${args.join(\" \")}\\x1b[0m`\nexport const green         = (...args: any) => `\\x1b[0;32m${args.join(\" \")}\\x1b[0m`\nexport const yellow        = (...args: any) => `\\x1b[0;33m${args.join(\" \")}\\x1b[0m`\nexport const purple        = (...args: any) => `\\x1b[0;34m${args.join(\" \")}\\x1b[0m`\nexport const magenta       = (...args: any) => `\\x1b[0;35m${args.join(\" \")}\\x1b[0m`\nexport const teal          = (...args: any) => `\\x1b[0;36m${args.join(\" \")}\\x1b[0m`\nexport const white         = (...args: any) => `\\x1b[0;37m${args.join(\" \")}\\x1b[0m`\nexport const boldUnderline = (...args: any) => `\\x1b[1;4m${args.join(\" \")}\\x1b[0m`\nexport const boldBlack     = (...args: any) => `\\x1b[1;30m${args.join(\" \")}\\x1b[0m`\nexport const boldRed       = (...args: any) => `\\x1b[1;31m${args.join(\" \")}\\x1b[0m`\nexport const boldGreen     = (...args: any) => `\\x1b[1;32m${args.join(\" \")}\\x1b[0m`\nexport const boldYellow    = (...args: any) => `\\x1b[1;33m${args.join(\" \")}\\x1b[0m`\nexport const boldPurple    = (...args: any) => `\\x1b[1;34m${args.join(\" \")}\\x1b[0m`\nexport const boldMagenta   = (...args: any) => `\\x1b[1;35m${args.join(\" \")}\\x1b[0m`\nexport const boldTeal      = (...args: any) => `\\x1b[1;36m${args.join(\" \")}\\x1b[0m`\nexport const boldWhite     = (...args: any) => `\\x1b[1;37m${args.join(\" \")}\\x1b[0m`\n", "import * as term from \"./term\"\n\n// console.error(`${term.gray(process.argv.join(\" \"))}\n\n// (Use STACK_TRACE=true ... to see the stack trace)\nexport function error(err: Error | string) {\n\tconst STACK_TRACE = process.env[\"STACK_TRACE\"] === \"true\"\n\n\tif (typeof err === \"string\" || !STACK_TRACE) {\n\t\tconsole.error(`${term.gray([process.argv0, process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\">\")} ${term.boldRed(\"error:\")} ${term.bold(err)}\n`)\n\t} else {\n\t\tconst stack = (err as { stack: string }).stack\n\t\t// prettier-ignore\n\t\tconsole.error(`${term.gray([process.argv0, process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\">\")} ${term.boldRed(\"error:\")} ${term.bold(err.message)}\n\n\t${stack.split(\"\\n\").map(line => \" \".repeat(2) + line).join(\"\\n\")}\n`)\n\t}\n}\n", "import * as term from \"../lib/term\"\n\nexport const cmds = `\nretro dev     Starts the dev server\nretro export  Exports the production-ready build (SSG)\nretro serve   Serves the production-ready build\n`.trim()\n\n// prettier-ignore\nexport const body = `${term.gray([process.argv0, process.argv.slice(1)].join(\" \"))}\n\n  ${term.bold(\"Usage:\")}\n\n    retro dev          Starts the dev server\n    retro export       Exports the production-ready build (SSG)\n    retro serve        Serves the production-ready build\n\n  ${term.bold(\"retro dev\")}\n\n    Starts the dev server\n\n      --cached         Use cached resources (default false)\n      --source-map     Add source maps (default true)\n      --port=<number>  Port number (default 8000)\n\n  ${term.bold(\"retro export\")}\n\n    Exports the production-ready build (SSG)\n\n      --cached         Use cached resources (default false)\n      --source-map     Add source maps (default true)\n\n  ${term.bold(\"retro serve\")}\n\n    Serves the production-ready build\n\n      --port=<number>  Port number (default 8000)\n\n  ${term.bold(\"Repository:\")}\n\n    ` + term.underline(\"https://github.com/zaydek/retro\") + `\n`\n", "import * as log from \"../lib/log\"\n// import * as term from \"../lib/term\"\nimport * as usage from \"./cli-usage\"\n\nfunction run() {\n\tconst argv = process.argv0 === \"node\" ? process.argv.slice(1) : process.argv\n\n\t// Cover [\"retro\"] case:\n\tif (argv.length === 1) {\n\t\tconsole.log(usage.body)\n\t\tprocess.exit(0)\n\t}\n\n\t// console.log(process.argv0)\n\n\t// var cmd interface{}\n\tconst arg = argv[1]\n\tif (arg == \"version\" || arg == \"--version\" || arg == \"--v\") {\n\t\tconsole.log(process.env[\"RETRO_VERSION\"] || \"TODO\")\n\t\tprocess.exit(0)\n\t} else if (arg == \"usage\" || arg == \"--usage\" || arg == \"help\" || arg == \"--help\") {\n\t\tconsole.log(usage.body)\n\t\tprocess.exit(0)\n\t} else if (arg == \"dev\") {\n\t\tprocess.env[\"__DEV__\"] = \"true\"\n\t\tprocess.env[\"NODE_ENV\"] = \"development\"\n\t\t// cmd = parseDevArguments(os.Args[2:]...)\n\t} else if (arg == \"export\") {\n\t\tprocess.env[\"__DEV__\"] = \"false\"\n\t\tprocess.env[\"NODE_ENV\"] = \"production\"\n\t\t// cmd = parseExportArguments(os.Args[2:]...)\n\t} else if (arg == \"serve\") {\n\t\tprocess.env[\"__DEV__\"] = \"false\"\n\t\tprocess.env[\"NODE_ENV\"] = \"production\"\n\t\t// cmd = parseServeArguments(os.Args[2:]...)\n\t} else {\n\t\t// prettier-ignore\n\t\tlog.error(\"Unrecognized command. \" +\n\t\t\t\"These are the commands:\\n\\n\" +\n\t\t\tusage.cmds.split(\"\\n\").map(each => \" \".repeat(2) + each).join(\"\\n\"))\n\t\tprocess.exit(2)\n\t}\n}\n\nrun()\n"],
  "mappings": ";AACO,IAAM,OAAgB,IAAI,SAAc,SAAY,KAAK,KAAK;AAC9D,IAAM,OAAgB,IAAI,SAAc,SAAY,KAAK,KAAK;AAC9D,IAAM,YAAgB,IAAI,SAAc,SAAY,KAAK,KAAK;AAW9D,IAAM,UAAgB,IAAI,SAAc,UAAa,KAAK,KAAK;;;ACT/D,eAAe;AACrB,QAAM,cAAc,QAAQ,IAAI,mBAAmB;AAEnD,MAAI,OAAO,QAAQ,YAAY,CAAC;AAC/B,YAAQ,MAAM,GAAG,AAAK,KAAK,CAAC,QAAQ,OAAO,QAAQ,KAAK,MAAM,IAAI,KAAK;AAAA;AAAA,IAErE,AAAK,KAAK,QAAQ,AAAK,QAAQ,aAAa,AAAK,KAAK;AAAA;AAAA;AAGxD,UAAM,QAAS,IAA0B;AAEzC,YAAQ,MAAM,GAAG,AAAK,KAAK,CAAC,QAAQ,OAAO,QAAQ,KAAK,MAAM,IAAI,KAAK;AAAA;AAAA,IAErE,AAAK,KAAK,QAAQ,AAAK,QAAQ,aAAa,AAAK,KAAK,IAAI;AAAA;AAAA,GAE3D,MAAM,MAAM,MAAM,IAAI,UAAQ,IAAI,OAAO,KAAK,MAAM,KAAK;AAAA;AAAA;AAAA;;;AClBrD,IAAM,OAAO;AAAA;AAAA;AAAA;AAAA,EAIlB;AAGK,IAAM,OAAO,GAAG,AAAK,KAAK,CAAC,QAAQ,OAAO,QAAQ,KAAK,MAAM,IAAI,KAAK;AAAA;AAAA,IAEzE,AAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMV,AAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQV,AAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOV,AAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMV,AAAK,KAAK;AAAA;AAAA,QAEN,AAAK,UAAU,qCAAqC;AAAA;;;ACpC5D;AACC,QAAM,OAAO,QAAQ,UAAU,SAAS,QAAQ,KAAK,MAAM,KAAK,QAAQ;AAGxE,MAAI,KAAK,WAAW;AACnB,YAAQ,IAAU;AAClB,YAAQ,KAAK;AAAA;AAMd,QAAM,MAAM,KAAK;AACjB,MAAI,OAAO,aAAa,OAAO,eAAe,OAAO;AACpD,YAAQ,IAAI,QAAQ,IAAI,oBAAoB;AAC5C,YAAQ,KAAK;AAAA,aACH,OAAO,WAAW,OAAO,aAAa,OAAO,UAAU,OAAO;AACxE,YAAQ,IAAU;AAClB,YAAQ,KAAK;AAAA,aACH,OAAO;AACjB,YAAQ,IAAI,aAAa;AACzB,YAAQ,IAAI,cAAc;AAAA,aAEhB,OAAO;AACjB,YAAQ,IAAI,aAAa;AACzB,YAAQ,IAAI,cAAc;AAAA,aAEhB,OAAO;AACjB,YAAQ,IAAI,aAAa;AACzB,YAAQ,IAAI,cAAc;AAAA;AAI1B,IAAI,MAAM,sDAET,AAAM,KAAK,MAAM,MAAM,IAAI,UAAQ,IAAI,OAAO,KAAK,MAAM,KAAK;AAC/D,YAAQ,KAAK;AAAA;AAAA;AAIf;",
  "names": []
}
