Retro is a minimalistic server-side generator.

Retro was designed with the philosophy that you should understand your tools and your tools should understand you.
This is why Retro is minimalistic in scope and scale.
You can read the Retro source in an afternoon or two.

Retro is a wholistic development environment for building server-side generated pages.
Retro specifically exists to make making websites fun.
Retro is compiles React apps into server-generated static HTML pages that are hydrates on the client.

Retro solves the following problems:
- Provides a simple API for routing and linking
- Page routes link instantly (when using the <Link> component)
- Support for <App> parent components
- Support for <Markdown> parent components for MDX
- Cache invalidation for consecutive builds
- Idiomatic loader and <Head> functions coupled with page components
- Use loader to resolve props on the server; tree shaken for development / production
- Use manifest to resolve page URLs on the server; tree shaken for development / production
- Use <Head> to resolve <head> metadata on the server; tree shaken for development / production
- Opt for JS or TypeScript-based projects

Retro does not yet solve the following problems:
- CSS modules
- Code splitting
- CSR-only (client-side rendering) strategy for *some* pages
- Support for React.Suspense

Retro does not attempt to solve the following problems:
- CSS in JS
- JS in CSS
- ESLint configuration

You simple create pages. Retro creates a cache, and from the cache generates the build folder.
If you are curious, you can poke around the cache.
In order to be productive with Retro, simply create pages.
MDX works out of the box with zero configuration. Routes are instant.
