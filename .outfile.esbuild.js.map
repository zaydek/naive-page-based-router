{
  "version": 3,
  "sources": ["packages/retro/main.ts", "packages/shared/terminal.ts", "packages/shared/log.ts", "packages/retro/cli/cli.ts", "packages/retro/commands/dev.ts", "packages/retro/esbuild-helpers.ts", "packages/retro/events.ts", "packages/retro/utils/detab.ts", "packages/retro/utils/env.ts", "packages/retro/utils/fsAll.ts", "packages/retro/utils/getPrettyDate.ts", "packages/retro/utils/pathify.ts", "packages/retro/utils/pathInfo.ts", "packages/retro/utils/uri.ts", "packages/retro/utils/validate.ts", "packages/retro/utils/watch.ts", "packages/retro/router/router-text.ts", "packages/retro/errors.ts", "packages/retro/router/router.ts", "packages/retro/commands/serve.ts", "packages/retro/commands/export.ts", "packages/retro/runtime.ts", "packages/retro/pages/pages.ts"],
  "sourcesContent": ["import * as cli from \"./cli/cli\"\nimport * as commands from \"./commands\"\nimport * as errors from \"./errors\"\nimport * as log from \"../shared/log\"\nimport * as T from \"./types\"\nimport * as terminal from \"../shared/terminal\"\nimport * as utils from \"./utils\"\n\nimport newRuntimeFromCommand from \"./runtime\"\n\nexport const EPOCH = Date.now()\n\nfunction accent(str: string): string {\n\treturn str.replace(/('[^']+')/g, terminal.cyan(\"$1\"))\n}\n\nfunction format(usage: string): string {\n\tconst arr = usage.split(\"\\n\")\n\treturn arr\n\t\t.map(line => {\n\t\t\tif (line === \"\") return \"\"\n\t\t\treturn \"\\x20\" + accent(line.replace(/\\t/g, \"  \")) // Tabs -> spaces\n\t\t})\n\t\t.join(\"\\n\")\n}\n\nconst usage = format(`\n${terminal.bold(\"retro dev\")}\n\n\tStart the dev server\n\n\t\t--cached=...     Use cached resources (default false)\n\t\t--sourcemap=...  Add source maps (default true)\n\t\t--mode=...       Serve mode 'spa' or 'ssg' (default 'ssg') (experimental)\n\t\t--port=...       Port number (default 8000)\n\n${terminal.bold(\"retro export\")}\n\n\tExport the production-ready build\n\n\t\t--cached=...     Use cached resources (default false)\n\t\t--sourcemap=...  Add source maps (default true)\n\n${terminal.bold(\"retro serve\")}\n\n\tServe the production-ready build\n\n\t\t--mode=...       Serve mode 'spa' or 'ssg' (default 'ssg') (experimental)\n\t\t--port=...       Port number (default 8000)\n\n${terminal.bold(\"Examples\")}\n\n\t${terminal.cyan(\"%\")} retro dev\n\t${terminal.cyan(\"%\")} retro dev --port=3000\n\t${terminal.cyan(\"%\")} retro export\n\t${terminal.cyan(\"%\")} retro export --cached && retro serve\n\t${terminal.cyan(\"%\")} retro export && retro serve\n\n${terminal.bold(\"Repository\")}\n\n\tretro:   ${terminal.underline(\"https://github.com/zaydek/retro\")}\n\tesbuild: ${terminal.underline(\"https://github.com/evanw/esbuild\")}\n`)\n\nasync function main(): Promise<void> {\n\tconst args = [...process.argv]\n\targs.shift() // Remove node\n\targs.shift() // Remove esnode  // TODO: This needs to be checked for distributed versions\n\targs.shift() // Remove main.ts // TODO: This needs to be checked for distributed versions\n\n\tlet cmdArg = \"usage\"\n\tif (args.length > 0) {\n\t\tcmdArg = args[0]!\n\t}\n\n\tlet cmd: T.Command\n\tswitch (cmdArg) {\n\t\tcase \"version\":\n\t\tcase \"--version\":\n\t\tcase \"--v\":\n\t\t\tconsole.log(process.env[\"RETRO_VERSION\"] ?? \"TODO\")\n\t\t\treturn\n\t\tcase \"usage\":\n\t\tcase \"--usage\":\n\t\t\tconsole.log(usage)\n\t\t\treturn\n\t\tcase \"help\":\n\t\tcase \"--help\":\n\t\t\tconsole.log(usage)\n\t\t\treturn\n\t\tcase \"dev\":\n\t\t\tutils.setEnvDevelopment()\n\t\t\tcmd = cli.parseDevCommand(...args.slice(1))\n\t\t\tbreak\n\t\tcase \"export\":\n\t\t\tutils.setEnvProduction()\n\t\t\tcmd = cli.parseExportCommand(...args.slice(1))\n\t\t\tbreak\n\t\tcase \"serve\":\n\t\t\tutils.setEnvProduction()\n\t\t\tcmd = cli.parseServeCommand(...args.slice(1))\n\t\t\tbreak\n\t\tdefault:\n\t\t\tlog.error(errors.badCommand(cmdArg))\n\t\t\tbreak\n\t}\n\n\tconst rt = await newRuntimeFromCommand(cmd!)\n\tswitch (rt.command.type) {\n\t\tcase \"dev\":\n\t\t\tawait commands.dev(rt as T.Runtime<T.DevCommand>)\n\t\t\tbreak\n\t\tcase \"export\":\n\t\t\tawait commands.export(rt as T.Runtime<T.ExportCommand>)\n\t\t\tbreak\n\t\tcase \"serve\":\n\t\t\tawait commands.serve(rt as T.Runtime<T.ServeCommand>)\n\t\t\tbreak\n\t}\n}\n\nprocess.on(\"uncaughtException\", err => {\n\tprocess.env[\"STACK_TRACE\"] = \"true\" // TODO\n\terr.message = `UncaughtException: ${err.message}`\n\tlog.error(err)\n})\n\nmain()\n", "// BuilderFunction describes the builder pattern where methods can be\n// recursively chained.\n//\n// For example:\n//\n// - build(...).method(...)\n// - build(...).method.method(...)\n// - build(...).method.method.methods(...)\n//\nexport interface BuilderChain {\n\t(...args: unknown[]): string\n\tnormal: BuilderChain\n\tbold: BuilderChain\n\tdim: BuilderChain\n\tunderline: BuilderChain\n\tblack: BuilderChain\n\tred: BuilderChain\n\tgreen: BuilderChain\n\tyellow: BuilderChain\n\tblue: BuilderChain\n\tmagenta: BuilderChain\n\tcyan: BuilderChain\n\twhite: BuilderChain\n\tbgBlack: BuilderChain\n\tbgRed: BuilderChain\n\tbgGreen: BuilderChain\n\tbgYellow: BuilderChain\n\tbgBlue: BuilderChain\n\tbgMagenta: BuilderChain\n\tbgCyan: BuilderChain\n\tbgWhite: BuilderChain\n}\n\nconst opts = [\n\t{ name: \"normal\", code: \"\\x1b[0m\" },\n\t{ name: \"bold\", code: \"\\x1b[1m\" },\n\t{ name: \"dim\", code: \"\\x1b[2m\" },\n\t{ name: \"underline\", code: \"\\x1b[4m\" },\n\t{ name: \"black\", code: \"\\x1b[30m\" },\n\t{ name: \"red\", code: \"\\x1b[31m\" },\n\t{ name: \"green\", code: \"\\x1b[32m\" },\n\t{ name: \"yellow\", code: \"\\x1b[33m\" },\n\t{ name: \"blue\", code: \"\\x1b[34m\" },\n\t{ name: \"magenta\", code: \"\\x1b[35m\" },\n\t{ name: \"cyan\", code: \"\\x1b[36m\" },\n\t{ name: \"white\", code: \"\\x1b[37m\" },\n\t{ name: \"bgBlack\", code: \"\\x1b[40m\" },\n\t{ name: \"bgRed\", code: \"\\x1b[41m\" },\n\t{ name: \"bgGreen\", code: \"\\x1b[42m\" },\n\t{ name: \"bgYellow\", code: \"\\x1b[43m\" },\n\t{ name: \"bgBlue\", code: \"\\x1b[44m\" },\n\t{ name: \"bgMagenta\", code: \"\\x1b[45m\" },\n\t{ name: \"bgCyan\", code: \"\\x1b[46m\" },\n\t{ name: \"bgWhite\", code: \"\\x1b[47m\" },\n]\n\nfunction build(...codes: string[]): BuilderChain {\n\tfunction format(...args: unknown[]): string {\n\t\tif (args.length === 0) return \"\"\n\t\tconst code = codes.join(\"\")\n\n\t\t// NOTE: Use '.replace' not '.replaceAll'; users have reported:\n\t\t// 'TypeError: args.join(...).replaceAll is not a function'.\n\t\treturn code + args.join(\" \").replace(/\\x1b\\[0m/g, \"\\x1b[0m\" + code) + \"\\x1b[0m\"\n\t}\n\tfor (const { name, code } of opts) {\n\t\tObject.defineProperty(format, name, {\n\t\t\tenumerable: true,\n\t\t\tget() {\n\t\t\t\treturn build(...new Set([...codes, code]))\n\t\t\t},\n\t\t})\n\t}\n\treturn format as BuilderChain\n}\n\nexport const normal = build(\"\\x1b[0m\")\nexport const bold = build(\"\\x1b[1m\")\nexport const dim = build(\"\\x1b[2m\")\nexport const underline = build(\"\\x1b[4m\")\nexport const black = build(\"\\x1b[30m\")\nexport const red = build(\"\\x1b[31m\")\nexport const green = build(\"\\x1b[32m\")\nexport const yellow = build(\"\\x1b[33m\")\nexport const blue = build(\"\\x1b[34m\")\nexport const magenta = build(\"\\x1b[35m\")\nexport const cyan = build(\"\\x1b[36m\")\nexport const white = build(\"\\x1b[37m\")\nexport const bgBlack = build(\"\\x1b[40m\")\nexport const bgRed = build(\"\\x1b[41m\")\nexport const bgGreen = build(\"\\x1b[42m\")\nexport const bgYellow = build(\"\\x1b[43m\")\nexport const bgBlue = build(\"\\x1b[44m\")\nexport const bgMagenta = build(\"\\x1b[45m\")\nexport const bgCyan = build(\"\\x1b[46m\")\nexport const bgWhite = build(\"\\x1b[47m\")\n", "import * as terminal from \"./terminal\"\n\nconst EOF = \"\\n\"\n\n// format converts tabs to spaces and adds two spaces to the start.\n//\n// TODO: Implement accent here.\nfunction format(...args: unknown[]): string {\n\t// For errors, extract error.message:\n\tif (args.length === 1 && args[0] instanceof Error) {\n\t\tconst error = args[0]\n\t\treturn format(error.message)\n\t}\n\n\tconst str = args.join(\" \")\n\treturn str\n\t\t.split(\"\\n\")\n\t\t.map((substr, x) => {\n\t\t\tif (x === 0 || substr === \"\") return substr\n\t\t\treturn \"\\x20\" + substr.replace(/\\t/g, \"\\x20\\x20\") // Tabs -> spaces\n\t\t})\n\t\t.join(\"\\n\")\n}\n\n// ok logs an error message that appears as \"> ok: ...\".\nexport function ok(...args: unknown[]): void {\n\tconst message = format(...args)\n\tconsole.log(`\\x20${terminal.bold(\">\")} ${terminal.bold(message)}${EOF}`)\n}\n\n// warning logs an error message that appears as \"> warning: ...\".\nexport function warning(...args: unknown[]): void {\n\tconst message = format(...args)\n\tconsole.warn(`\\x20${terminal.bold(\">\")} ${terminal.bold.yellow(\"warning:\")} ${terminal.bold(message)}${EOF}`)\n}\n\n// error logs an error message that appears as \"> error: ...\".\nexport function error(...args: unknown[]): void {\n\tconst message = format(...args)\n\tconsole.error(`\\x20${terminal.bold(\">\")} ${terminal.bold.red(\"error:\")} ${terminal.bold(message)}${EOF}`)\n\tprocess.exit(1)\n}\n", "import * as log from \"../../shared/log\"\nimport * as T from \"../types\"\nimport * as terminal from \"../../shared/terminal\"\n\n// parseDevCommand parses the dev command.\nexport function parseDevCommand(...args: string[]): T.DevCommand {\n\tconst cmd: T.DevCommand = {\n\t\ttype: \"dev\",\n\t\tcached: false,\n\t\tsourcemap: true,\n\t\tport: 8000,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--cached\")) {\n\t\t\tif (arg === \"--cached\") {\n\t\t\t\tcmd.cached = true\n\t\t\t} else if (arg === \"--cached=true\" || arg === \"--cached=false\") {\n\t\t\t\tcmd.cached = JSON.parse(arg.slice(\"--cached=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--cached\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--sourcemap\")) {\n\t\t\tif (arg === \"--sourcemap\") {\n\t\t\t\tcmd.sourcemap = true\n\t\t\t} else if (arg === \"--sourcemap=true\" || arg === \"--sourcemap=false\") {\n\t\t\t\tcmd.sourcemap = JSON.parse(arg.slice(\"--sourcemap=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--sourcemap\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--port\")) {\n\t\t\tif (/^--port=\\d+$/.test(arg)) {\n\t\t\t\tcmd.port = JSON.parse(arg.slice(\"--port=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--port\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command ${terminal.magenta(`'${badCmd}'`)}. Use ${terminal.magenta(\"'retro help'\")} for help.`)\n\t}\n\tif (cmd.port < 1e3 || cmd.port >= 1e4) {\n\t\tlog.error(`${terminal.magenta(\"'--port'\")} must be between 1000-9999.`)\n\t}\n\treturn cmd\n}\n\n// parseExportCommand parses the export command.\nexport function parseExportCommand(...args: string[]): T.ExportCommand {\n\tconst cmd: T.ExportCommand = {\n\t\ttype: \"export\",\n\t\tcached: false,\n\t\tsourcemap: true,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--cached\")) {\n\t\t\tif (arg === \"--cached\") {\n\t\t\t\tcmd.cached = true\n\t\t\t} else if (arg === \"--cached=true\" || arg === \"--cached=false\") {\n\t\t\t\tcmd.cached = JSON.parse(arg.slice(\"--cached=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--cached\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--sourcemap\")) {\n\t\t\tif (arg === \"--sourcemap\") {\n\t\t\t\tcmd.sourcemap = true\n\t\t\t} else if (arg === \"--sourcemap=true\" || arg === \"--sourcemap=false\") {\n\t\t\t\tcmd.sourcemap = JSON.parse(arg.slice(\"--sourcemap=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--sourcemap\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command ${terminal.magenta(`'${badCmd}'`)}. Use ${terminal.magenta(\"'retro help'\")} for help.`)\n\t}\n\treturn cmd\n}\n\n// parseServeCommand parses the serve command.\nexport function parseServeCommand(...args: string[]): T.ServeCommand {\n\tconst cmd: T.ServeCommand = {\n\t\ttype: \"serve\",\n\t\tmode: \"ssg\",\n\t\tport: 8000,\n\t}\n\tlet badCmd = \"\"\n\tfor (const arg of args) {\n\t\tif (arg.startsWith(\"--mode\")) {\n\t\t\tif (arg === \"--mode=spa\") {\n\t\t\t\tcmd.mode = \"spa\"\n\t\t\t} else if (arg === \"--mode=ssg\") {\n\t\t\t\tcmd.mode = \"ssg\"\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--mode\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (arg.startsWith(\"--port\")) {\n\t\t\tif (/^--port=\\d+$/.test(arg)) {\n\t\t\t\tcmd.port = JSON.parse(arg.slice(\"--port=\".length))\n\t\t\t} else {\n\t\t\t\tbadCmd = \"--port\"\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tbadCmd = arg\n\t\t}\n\t}\n\tif (badCmd !== \"\") {\n\t\tlog.error(`Bad command ${terminal.magenta(`'${badCmd}'`)}. Use ${terminal.magenta(\"'retro help'\")} for help.`)\n\t}\n\tif (cmd.port < 1e3 || cmd.port >= 1e4) {\n\t\tlog.error(`${terminal.magenta(\"'--port'\")} must be between 1000-9999.`)\n\t}\n\treturn cmd\n}\n", "import * as esbuild from \"esbuild\"\nimport * as esbuildHelpers from \"../esbuild-helpers\"\nimport * as events from \"../events\"\nimport * as fsp from \"fs/promises\"\nimport * as http from \"http\"\nimport * as log from \"../../shared/log\"\nimport * as path from \"path\"\nimport * as router from \"../router\"\nimport * as terminal from \"../../shared/terminal\"\nimport * as types from \"../types\"\nimport * as utils from \"../utils\"\n\nimport { EPOCH } from \"../main\"\n\nfunction handleEsbuildWarnings(result: esbuild.BuildResult): void {\n\tif (result.warnings.length === 0) {\n\t\t// No-op\n\t\treturn\n\t}\n\tfor (const warning of result.warnings) {\n\t\tlog.warning(esbuildHelpers.format(warning, terminal.yellow))\n\t}\n\tprocess.exit(1)\n}\n\n// TODO: Integrate handleEsbuildWarnings.\nfunction handleEsbuildError(error: Error): void {\n\tif (error === undefined || error === null) {\n\t\t// No-op\n\t\treturn\n\t}\n\tif (!(\"errors\" in error) || !(\"warnings\" in error)) throw error\n\tlog.error(esbuildHelpers.format((error as esbuild.BuildFailure).errors[0]!, terminal.bold.red))\n}\n\n// async function exportPages(runtime: types.Runtime): Promise<void> {\n// \tlet once = false\n// \tfor (const meta of Object.values(runtime.router)) {\n// \t\tconst start = Date.now()\n// \t\tconst str = await router.renderRouteMetaToString(runtime.document, meta, { devMode: false })\n// \t\tawait fsp.mkdir(path.dirname(meta.routeInfo.dst), { recursive: true })\n// \t\tawait fsp.writeFile(meta.routeInfo.dst, str)\n// \t\tif (!once) {\n// \t\t\tconsole.log()\n// \t\t\tonce = true\n// \t\t}\n// \t\tevents.export_(runtime, meta, start)\n// \t}\n// \tconsole.log()\n// }\n\n// // TODO: Check this.\n// function random(lower: number, upper: number, excludes: number[] = []): number {\n// \tconst num = lower + Math.floor(Math.random() * (upper - lower))\n// \tif (excludes.includes(num)) return random(lower, upper, excludes)\n// \treturn num\n// }\n\n// Step 1: Build app.js with watch mode enabled\n// Step 2: On watch, rebuild app.js\n// Step 3: On HTTP requests, render and cache the current page to string and ~~rebuild app.js~~\nexport async function dev(runtime: types.Runtime<types.DevCommand>): Promise<void> {\n\t// await exportPages(runtime)\n\n\t// Build __cache__/app.js:\n\tconst src = path.join(runtime.directories.cacheDirectory, \"app.js\")\n\tconst contents = router.renderRouterToString(runtime.router)\n\tawait fsp.writeFile(src, contents)\n\n\t// Build __export__/app.js:\n\tconst dst = path.join(runtime.directories.exportDirectory, src.slice(runtime.directories.srcPagesDirectory.length))\n\n\tlet buildResult: esbuild.BuildResult\n\ttry {\n\t\tbuildResult = await esbuild.build({\n\t\t\t...esbuildHelpers.bundleAppConfiguration(src, dst),\n\t\t\tincremental: true,\n\t\t\twatch: {\n\t\t\t\tonRebuild(error, result): void {\n\t\t\t\t\tif (error !== null) handleEsbuildError(error)\n\t\t\t\t\tif (result !== null) handleEsbuildWarnings(result)\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t} catch (error) {\n\t\thandleEsbuildError(error)\n\t}\n\n\tlet serveResult: esbuild.ServeResult\n\ttry {\n\t\tlet once = false\n\t\tserveResult = await esbuild.serve(\n\t\t\t{\n\t\t\t\t// port: random(1_000, 10_000, [runtime.command.port]),\n\t\t\t\tservedir: runtime.directories.exportDirectory,\n\t\t\t\tonRequest: (args: esbuild.ServeOnRequestArgs) => {\n\t\t\t\t\tif (!once) {\n\t\t\t\t\t\tconsole.log()\n\t\t\t\t\t\tonce = true\n\t\t\t\t\t}\n\t\t\t\t\tevents.serve(args)\n\t\t\t\t},\n\t\t\t},\n\t\t\t{},\n\t\t)\n\t} catch (error) {\n\t\thandleEsbuildError(error)\n\t}\n\n\t// console.log(serveResult!.port)\n\n\t// This implementation is roughly based on:\n\t//\n\t// - https://esbuild.github.io/api/#customizing-server-behavior\n\t// - https://github.com/evanw/esbuild/issues/858#issuecomment-782814216\n\t//\n\tconst server_proxy = http.createServer(async (req, res) => {\n\t\tconst opts = {\n\t\t\thostname: serveResult.host, // Reuse servedir host\n\t\t\tport: serveResult.port, // Reuse servedir port\n\t\t\tpath: utils.ssgify(req.url!),\n\t\t\tmethod: req.method,\n\t\t\theaders: req.headers,\n\t\t}\n\n\t\t// ~/dev\n\t\tif (req.url === \"/~dev\") {\n\t\t\tres.writeHead(200, {\n\t\t\t\t\"Content-Type\": \"text/event-stream\",\n\t\t\t\t\"Cache-Control\": \"no-cache\",\n\t\t\t\tConnection: \"keep-alive\",\n\t\t\t})\n\t\t\t// ...\n\t\t\treturn\n\t\t}\n\n\t\tlet url = req.url!\n\t\tif (url.endsWith(\".html\")) {\n\t\t\turl = url.slice(0, -\".html\".length) // \"/index.html\" -> \"/index\"\n\t\t}\n\t\tif (url.endsWith(\"/index\")) {\n\t\t\turl = url.slice(0, -\"index\".length) // \"/index\" -> \"/\"\n\t\t}\n\n\t\t// let url = req.url!\n\t\t// switch (true) {\n\t\t// \tcase url.endsWith(\"/index.html\"):\n\t\t// \t\turl = url.slice(0, -\"index.html\".length)\n\t\t// \t\tbreak\n\t\t// \tcase url.endsWith(\"/index\"):\n\t\t// \t\turl = url.slice(0, -\"index\".length)\n\t\t// \t\tbreak\n\t\t// \tcase url.endsWith(\".html\"):\n\t\t// \t\turl = url.slice(0, -\".html\".length)\n\t\t// \t\tbreak\n\t\t// }\n\n\t\tif (!url.startsWith(\"/\" + runtime.directories.publicDirectory) && path.extname(url) === \"\") {\n\t\t\tlet meta = runtime.router[url]\n\t\t\tif (meta === undefined) {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log(\"a\")\n\t\t\t\t\tconst buffer = await fsp.readFile(path.join(runtime.directories.exportDirectory, \"404.html\"))\n\t\t\t\t\tres.writeHead(200, { \"Content-Type\": \"text/html\" })\n\t\t\t\t\tres.end(buffer.toString())\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(\"b\")\n\t\t\t\t\tres.writeHead(404, { \"Content-Type\": \"text/plain\" })\n\t\t\t\t\tres.end(\"404 - Not Found\")\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst src = meta.routeInfo.src\n\t\t\tconst dst = path.join(runtime.directories.cacheDirectory, src.replace(/\\..*$/, \".esbuild.js\"))\n\n\t\t\ttry {\n\t\t\t\tconst result = await esbuild.build(esbuildHelpers.transpileJSXAndTSConfiguration(src, dst))\n\t\t\t\tif (result.warnings.length > 0) {\n\t\t\t\t\tfor (const warning of result.warnings) {\n\t\t\t\t\t\tlog.warning(esbuildHelpers.format(warning, terminal.yellow))\n\t\t\t\t\t}\n\t\t\t\t\tprocess.exit(1)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (!(\"errors\" in error) || !(\"warnings\" in error)) throw error\n\t\t\t\tlog.error(esbuildHelpers.format((error as esbuild.BuildFailure).errors[0]!, terminal.bold.red))\n\t\t\t}\n\n\t\t\tlet module_: types.PageModule\n\t\t\ttry {\n\t\t\t\tconst path_ = path.join(process.cwd(), dst)\n\t\t\t\tmodule_ = await require(path_)\n\t\t\t\tdelete require.cache[require.resolve(path_)] // Purge the dependency cache\n\t\t\t\tmeta.module = module_\n\t\t\t} catch (error) {\n\t\t\t\tlog.error(error)\n\t\t\t}\n\n\t\t\tconst contents = router.renderRouteMetaToString(runtime.template, meta, { dev: true })\n\t\t\tawait fsp.mkdir(path.dirname(meta.routeInfo.dst), { recursive: true })\n\t\t\tawait fsp.writeFile(meta.routeInfo.dst, contents)\n\t\t}\n\n\t\tconst req_proxy = http.request(opts, async res_proxy => {\n\t\t\tif (res_proxy.statusCode === 404) {\n\t\t\t\t// TODO: Do we even need this?\n\t\t\t\tres.writeHead(404, { \"Content-Type\": \"text/plain\" })\n\t\t\t\tres.end(\"404 - Not Found\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tres.writeHead(res_proxy.statusCode!, res_proxy.headers)\n\t\t\tres_proxy.pipe(res, { end: true })\n\t\t})\n\n\t\treq.pipe(req_proxy, { end: true })\n\t})\n\n\t// // Pre-generate __export__/404.html:\n\t// setTimeout(async () => {\n\t// \tconst meta404 = runtime.router[\"/404\"]\n\t// \tif (meta404 !== undefined) {\n\t// \t\tconst contents404 = router.renderRouteMetaToString(runtime.template, meta404, { dev: true })\n\t// \t\tawait fsp.mkdir(path.dirname(meta404.routeInfo.dst), { recursive: true })\n\t// \t\tawait fsp.writeFile(meta404.routeInfo.dst, contents404)\n\t// \t}\n\t// }, 0)\n\n\tserver_proxy.listen(runtime.command.port)\n\n\tconsole.log(Date.now() - EPOCH)\n}\n", "import * as esbuild from \"esbuild\"\nimport * as terminal from \"../shared/terminal\"\n\nconst defines = (): { [key: string]: string } => ({\n\t__DEV__: process.env.__DEV__!,\n\t\"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV),\n})\n\nexport const transpileJSXAndTSConfiguration = (src: string, dst: string): esbuild.BuildOptions => ({\n\tbundle: true,\n\tdefine: defines(),\n\tentryPoints: [src],\n\texternal: [\"react\", \"react-dom\"], // TODO: Upgrade to ...pkgDependencies, etc.\n\tformat: \"cjs\", // For require\n\tinject: [\"packages/retro/react-shim.js\"],\n\tloader: { \".js\": \"jsx\" },\n\tlogLevel: \"silent\",\n\tminify: false,\n\toutfile: dst,\n\t// plugins: [...configs.retro.plugins], // TODO\n})\n\nexport const bundleAppConfiguration = (src: string, dst: string): esbuild.BuildOptions => ({\n\tbundle: true,\n\tdefine: defines(),\n\tentryPoints: [src],\n\texternal: [],\n\tformat: \"iife\",\n\tinject: [\"packages/retro/react-shim.js\"],\n\tloader: { \".js\": \"jsx\" },\n\tlogLevel: \"silent\", // TODO\n\tminify: true,\n\toutfile: dst,\n\t// plugins: [...configs.retro.plugins], // TODO\n})\n\nexport function format(msg: esbuild.Message, color: (...args: unknown[]) => void): string {\n\tconst meta = msg.location!\n\n\tconst namespace = `${meta.file}:${meta.line}:${meta.column}`\n\tconst error = `esbuild: ${msg.text}`\n\n\tlet code = \"\"\n\tcode += `${meta.lineText.slice(0, meta.column)}`\n\tcode += `${color(meta.lineText.slice(meta.column, meta.column + meta.length))}`\n\tcode += `${meta.lineText.slice(meta.column + meta.length)}`\n\n\treturn `${namespace}: ${error}\n\n\t${meta.line} ${terminal.dim(\"|\")} ${code}\n\t${\" \".repeat(String(meta.line).length)} \\x20 ${\" \".repeat(meta.column)}${color(\"~\".repeat(meta.length))}`\n}\n", "import * as esbuild from \"esbuild\"\nimport * as path from \"path\"\nimport * as T from \"./types\"\nimport * as terminal from \"../shared/terminal\"\nimport * as utils from \"./utils\"\n\nconst TERM_WIDTH = 40\n\nfunction formatMS(ms: number): string {\n\tswitch (true) {\n\t\tcase ms < 250:\n\t\t\t// 250ms\n\t\t\treturn `${ms}ms`\n\t\tdefault:\n\t\t\t// 0.25ms\n\t\t\treturn `${(ms / 1e3).toFixed(2)}s`\n\t}\n}\n\nexport function export_(runtime: T.Runtime, meta: T.RouteMeta, start: number): void {\n\tconst dur = formatMS(Date.now() - start)\n\n\tconst l1 = runtime.directories.srcPagesDirectory.length\n\tconst l2 = runtime.directories.exportDirectory.length\n\n\tlet color = terminal.white\n\tif (meta.routeInfo.type === \"dynamic\") {\n\t\tcolor = terminal.cyan\n\t}\n\n\tlet dimColor = terminal.dim.white\n\tif (meta.routeInfo.type === \"dynamic\") {\n\t\tdimColor = terminal.dim.cyan\n\t}\n\n\tconst src = meta.routeInfo.src.slice(l1)\n\tconst src_ext = path.extname(src)\n\tconst src_name = src.slice(1, -src_ext.length)\n\n\tconst dst = meta.routeInfo.dst.slice(l2)\n\tconst dst_ext = path.extname(dst)\n\tconst dst_name = dst.slice(1, -dst_ext.length)\n\n\tconst sep = \"-\".repeat(Math.max(0, TERM_WIDTH - `/${src_name}${src_ext}\\x20`.length))\n\n\t// TODO: Clean this up. This is way too hard to read.\n\tconst datestr = terminal.dim(utils.getCurrentPrettyDate())\n\tconsole.log(\n\t\t`\\x20${datestr}\\x20\\x20` +\n\t\t\t`${dimColor(\"/\")}${color(src_name)}${dimColor(src_ext)} ${dimColor(sep)} ${dimColor(\"/\")}${color(dst_name)}${\n\t\t\t\tstart === 0 ? \"\" : ` ${dimColor(`(${dur})`)}`\n\t\t\t}`,\n\t)\n}\n\nexport function serve(args: esbuild.ServeOnRequestArgs): void {\n\tconst dur = formatMS(args.timeInMS)\n\n\tlet color = terminal.normal\n\tif (args.status < 200 || args.status >= 300) {\n\t\tcolor = terminal.red\n\t}\n\n\tlet dimColor = terminal.dim\n\tif (args.status < 200 || args.status >= 300) {\n\t\tdimColor = terminal.dim.red\n\t}\n\n\tlet logger = (...args: unknown[]): void => console.log(...args)\n\tif (args.status < 200 || args.status >= 300) {\n\t\tlogger = (...args) => console.error(...args) // eslint-disable-line\n\t}\n\n\tconst path_ = args.path\n\tconst path_ext = path.extname(path_)\n\tconst path_name = path_.slice(1, -path_ext.length)\n\n\tconst sep = \"-\".repeat(Math.max(0, TERM_WIDTH - `/${path_name}${path_ext}\\x20`.length))\n\n\t// TODO: Clean this up. This is way too hard to read.\n\tconst datestr = terminal.dim(utils.getCurrentPrettyDate())\n\tlogger(\n\t\t`\\x20${datestr}\\x20\\x20` +\n\t\t\t`${dimColor(\"/\")}${color(path_name)}${dimColor(path_ext)} ${dimColor(sep)} ${color(args.status)} ${dimColor(\n\t\t\t\t`(${dur})`,\n\t\t\t)}`,\n\t)\n}\n", "const EOF = \"\\n\"\n\n// detab removes the leading tabs from a string. An EOF is delimited for\n// multiline strings.\nexport function detab(str: string, keep = 0): string {\n\tlet xs: number[] = []\n\tconst lines = str.trimEnd().split(\"\\n\")\n\tfor (const line of lines) {\n\t\tif (line.length === 0) continue\n\t\tlet x = 0\n\t\twhile (x < line.length) {\n\t\t\tif (line[x] !== \"\\t\") {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tx++\n\t\t}\n\t\txs.push(x)\n\t}\n\tconst x = Math.min(...xs)\n\n\t// prettier-ignore\n\treturn lines.map(line => \"\\t\".repeat(keep) + line.slice(x)).join(\"\\n\") +\n\t\t(lines.length === 1 ? \"\" : EOF)\n}\n", "// setEnvDevelopment sets environment variables for development mode.\nexport function setEnvDevelopment(): void {\n\tprocess.env[\"__DEV__\"] = \"true\"\n\tprocess.env[\"NODE_ENV\"] = \"development\"\n}\n\n// setEnvProduction sets environment variables for production mode.\nexport function setEnvProduction(): void {\n\tprocess.env[\"__DEV__\"] = \"false\"\n\tprocess.env[\"NODE_ENV\"] = \"production\"\n}\n", "import * as fs from \"fs\"\nimport * as path from \"path\"\n\nexport async function readdirAll(entry: string, excludes: string[] = []): Promise<string[]> {\n\tconst ctx: string[] = []\n\tasync function recurse(entry: string): Promise<void> {\n\t\tconst ls = await fs.promises.readdir(entry)\n\t\tconst items = ls.map(item => path.join(entry, item)) // Add entry\n\t\tfor (const item of items) {\n\t\t\tif (excludes.includes(item)) continue\n\t\t\tconst stats = await fs.promises.stat(item)\n\t\t\tif (stats.isDirectory()) {\n\t\t\t\tctx.push(item)\n\t\t\t\tawait recurse(item)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tctx.push(item)\n\t\t}\n\t}\n\tawait recurse(entry)\n\treturn ctx\n}\n\nexport async function copyAll(src_dir: string, dst_dir: string, excludes: string[] = []): Promise<void> {\n\tconst dirs: string[] = []\n\tconst srcs: string[] = []\n\tconst ctx = await readdirAll(src_dir, excludes)\n\tfor (const item of ctx) {\n\t\tconst stats = await fs.promises.stat(item)\n\t\tif (!stats.isDirectory()) {\n\t\t\tsrcs.push(item)\n\t\t} else {\n\t\t\tdirs.push(item)\n\t\t}\n\t}\n\tfor (const dir of dirs) {\n\t\tconst target = path.join(dst_dir, dir.slice(src_dir.length))\n\t\tawait fs.promises.mkdir(target, { recursive: true })\n\t}\n\tfor (const src of srcs) {\n\t\tconst target = path.join(dst_dir, src.slice(src_dir.length))\n\t\tawait fs.promises.copyFile(src, target)\n\t}\n}\n", "// getPrettyDate formats a date as \"03:04:05.000 AM\".\nexport function getPrettyDate(date: Date): string {\n\tconst hh = String(date.getHours() % 12 ?? 12).padStart(2, \"0\")\n\tconst mm = String(date.getMinutes()).padStart(2, \"0\")\n\tconst ss = String(date.getSeconds()).padStart(2, \"0\")\n\tconst am = date.getHours() < 12 ? \"AM\" : \"PM\"\n\tconst ms = String(date.getMilliseconds()).slice(0, 3).padStart(3, \"0\")\n\treturn `${hh}:${mm}:${ss}.${ms} ${am}`\n}\n\n// getCurrentPrettyDate formats the current date as \"03:04:05.000 AM\".\nexport function getCurrentPrettyDate(): string {\n\treturn getPrettyDate(new Date())\n}\n", "import * as path from \"path\"\n\n// spaify converts a URL for SPA-mode.\nexport function spaify(_: string): string {\n\treturn \"/\"\n}\n\n// ssgify converts a URL for SSG-mode.\nexport function ssgify(url: string): string {\n\tif (url.endsWith(\"/\")) return url + \"index.html\"\n\tif (path.extname(url) === \"\") return url + \".html\"\n\treturn url\n}\n", "import * as path from \"path\"\n\n// prettier-ignore\nexport interface PathInfo {\n\tsrc: string      // e.g. \"path/to/basename.ext\"\n\tbasename: string // e.g. \"basename.ext\"\n\tname: string     // e.g. \"basename\"\n\text: string      // e.g. \".ext\"\n}\n\nexport function parsePathInfo(src: string): PathInfo {\n\tconst basename = path.basename(src)\n\tconst ext = path.extname(src)\n\tconst name = basename.slice(0, -ext.length)\n\treturn { src, basename, name, ext }\n}\n", "// testURISafeCharacter tests whether a character matches a reserved or\n// unreserved URI character based on RFC 3986.\nfunction testURISafeCharacter(char: string): boolean {\n\t// prettier-ignore\n\tif (\n\t\t(char >= \"a\" && char <= \"z\") || // ALPHA LOWER\n\t\t(char >= \"A\" && char <= \"Z\") || // ALPHA LOWER\n\t\t(char >= \"0\" && char <= \"9\")    // DIGIT\n\t) {\n\t\treturn true\n\t}\n\tswitch (char) {\n\t\t// https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tcase \"-\":\n\t\tcase \".\":\n\t\tcase \"_\":\n\t\tcase \"~\":\n\t\t// https://tools.ietf.org/html/rfc3986#section-2.2\n\t\tcase \":\":\n\t\tcase \"/\":\n\t\tcase \"?\":\n\t\tcase \"#\":\n\t\tcase \"[\":\n\t\tcase \"]\":\n\t\tcase \"@\":\n\t\tcase \"!\":\n\t\tcase \"$\":\n\t\tcase \"&\":\n\t\tcase \"'\":\n\t\tcase \"(\":\n\t\tcase \")\":\n\t\tcase \"*\":\n\t\tcase \"+\":\n\t\tcase \",\":\n\t\tcase \";\":\n\t\tcase \"=\":\n\t\t\treturn true\n\t}\n\treturn false\n}\n\nexport function testURISafe(str: string): boolean {\n\tfor (const char of str) {\n\t\tif (!testURISafeCharacter(char)) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "// validateObject asserts a value strictly matches an object.\nfunction validateObject(value: unknown): boolean {\n\treturn typeof value === \"object\" && value !== null && !Array.isArray(value)\n}\n\n// validateObject asserts a value strictly matches an array.\nfunction validateArray(value: unknown): boolean {\n\treturn typeof value === \"object\" && value !== null && Array.isArray(value)\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\ninterface UnknownObject {\n\t[key: string]: unknown\n}\n\nexport function validateStaticModuleExports(exports: unknown): boolean {\n\tif (!validateObject(exports)) return false\n\tconst known = exports as UnknownObject\n\tswitch (true) {\n\t\tcase !(known.serverProps === undefined || typeof known.serverProps === \"function\"):\n\t\tcase !(known.Head === undefined || typeof known.Head === \"function\"):\n\t\tcase !(typeof known.default === \"function\"): // NOTE: exports.default is required.\n\t\t\treturn false\n\t}\n\treturn true\n}\n\nexport function validateDynamicModuleExports(exports: unknown): boolean {\n\tif (!validateObject(exports)) return false\n\tconst known = exports as UnknownObject\n\tswitch (true) {\n\t\tcase !(known.serverPaths === undefined || typeof known.serverPaths === \"function\"):\n\t\tcase !(known.Head === undefined || typeof known.Head === \"function\"):\n\t\tcase !(typeof known.default === \"function\"): // NOTE: exports.default is required.\n\t\t\treturn false\n\t}\n\treturn true\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport function validateServerPropsReturn(ret: unknown): boolean {\n\treturn validateObject(ret)\n}\n\nexport function validateServerPathsReturn(ret: unknown): boolean {\n\tif (!validateArray(ret) || (ret as unknown[]).length === 0) return false\n\tconst known = ret as unknown[]\n\tconst ok = known.every(meta => {\n\t\tif (!validateObject(meta)) return false\n\t\tconst known = meta as UnknownObject\n\n\t\t// prettier-ignore\n\t\tconst ok = (\n\t\t\t(\"path\" in known && typeof known.path === \"string\") &&\n\t\t\t(\"props\" in known && validateObject(known.props))\n\t\t)\n\t\treturn ok\n\t})\n\treturn ok\n}\n", "import * as fs from \"fs\"\nimport * as p from \"path\"\n\n// watcher implements a simple filesystem watcher. The first run builds a cache\n// that maps paths to mtimeMs. Consecutive runs returns on filesystem events.\nexport async function watcher(root: string): Promise<() => Promise<string>> {\n\tconst mtimeMsMap: { [key: string]: number } = {}\n\n\t// recurse recurses on an entry path. Parameter deep describes whether to\n\t// eagerly return on mtimeMs mismatches.\n\tasync function recurse(entry: string, { deep }: { deep: boolean }): Promise<string> {\n\t\tconst stat = await fs.promises.stat(entry)\n\t\tconst mtimeMs = mtimeMsMap[entry]\n\t\tif (mtimeMs === undefined || stat.mtimeMs !== mtimeMs) {\n\t\t\tmtimeMsMap[entry] = stat.mtimeMs\n\t\t\tif (!deep) {\n\t\t\t\treturn entry\n\t\t\t}\n\t\t}\n\t\tif (stat.isDirectory()) {\n\t\t\tfor (const each of await fs.promises.readdir(entry)) {\n\t\t\t\tconst src = p.join(entry, each)\n\t\t\t\tconst result = await recurse(src, { deep })\n\t\t\t\tif (result !== \"\") {\n\t\t\t\t\tif (!deep) {\n\t\t\t\t\t\treturn result\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn \"\"\n\t}\n\n\tawait recurse(root, { deep: true })\n\treturn async () => await recurse(root, { deep: false })\n}\n", "import * as log from \"../../shared/log\"\nimport * as React from \"react\"\nimport * as ReactDOMServer from \"react-dom/server\"\nimport * as types from \"../types\"\n\n// TODO: newRouteFromRouteMeta()\n\n// TODO: Add support for <Layout> components.\n// TODO: Write tests.\nexport function renderRouteMetaToString(template: string, meta: types.RouteMeta, { dev }: { dev: boolean }): string {\n\tlet head = \"<!-- <Head { path, ...serverProps }> -->\"\n\ttry {\n\t\tif (typeof meta.module.Head === \"function\") {\n\t\t\tconst str = ReactDOMServer.renderToStaticMarkup(React.createElement(meta.module.Head, meta.descriptProps))\n\t\t\thead = str.replace(/></g, \">\\n\\t\\t<\").replace(/\\/>/g, \" />\")\n\t\t}\n\t} catch (error) {\n\t\tlog.error(`${meta.routeInfo.src}.<Head>: ${error.message}`)\n\t}\n\n\t// TODO: Upgrade to <script src=\"/app.[hash].js\">?\n\tlet body = \"\"\n\tbody += `<noscript>You need to enable JavaScript to run this app.</noscript>`\n\tbody += `\\n\\t\\t<div id=\"root\"></div>`\n\tbody += `\\n\\t\\t<script src=\"/app.js\"></script>`\n\tbody += !dev ? \"\" : `\\n\\t\\t<script type=\"module\">`\n\tbody += !dev ? \"\" : `\\n\\t\\t\\tconst events = new EventSource(\"/~dev\")`\n\tbody += !dev ? \"\" : `\\n\\t\\t\\tevents.addEventListener(\"reload\", e => window.location.reload())`\n\tbody += !dev ? \"\" : `\\n\\t\\t\\tevents.addEventListener(\"warning\", e => console.warn(JSON.parse(e.data)))`\n\tbody += !dev ? \"\" : `\\n\\t\\t</script>`\n\n\ttry {\n\t\tif (typeof meta.module.default === \"function\") {\n\t\t\tconst str = ReactDOMServer.renderToString(React.createElement(meta.module.default, meta.descriptProps))\n\t\t\tbody = body.replace(`<div id=\"root\"></div>`, `<div id=\"root\">${str}</div>`)\n\t\t}\n\t} catch (error) {\n\t\tlog.error(`${meta.routeInfo.src}.<Page>: ${error.message}`)\n\t}\n\n\tconst contents = template.replace(\"%head%\", head).replace(\"%page%\", body)\n\treturn contents\n}\n\n// TODO: newRouterFromPages?()\n\n// TODO: Add support for <Layout> components.\n// TODO: Write tests.\nexport function renderRouterToString(router: types.Router): string {\n\tconst map = new Map<string, string>()\n\tfor (const meta of Object.values(router)) {\n\t\tmap.set(meta.routeInfo.src, meta.routeInfo.component)\n\t}\n\n\tconst distinct = Array.from(map)\n\n\treturn `import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Route, Router } from \"../packages/router\"\n\n// Components\n${distinct.map(([src, component]) => `import ${component} from \"../${src}\"`).join(\"\\n\")}\n\nexport default function App() {\n\treturn (\n\t\t<Router>\n${\n\tObject.entries(router)\n\t\t.map(\n\t\t\t([path, meta]) => `\n\t\t\t<Route path=\"${path}\">\n\t\t\t\t<${meta.routeInfo.component} {...${JSON.stringify(meta.descriptProps)}} />\n\t\t\t</Route>`,\n\t\t)\n\t\t.join(\"\\n\") + \"\\n\"\n}\n\t\t</Router>\n\t)\n}\n\nReactDOM.hydrate(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n)\n` // EOF\n}\n\n// ${\n// \tJSON.parse(process.env.STRICT_MODE ?? \"true\") === \"true\"\n// \t\t? `ReactDOM.${JSON.parse(process.env.RENDER ?? \"false\") === \"true\" ? \"render\" : \"hydrate\"}(\n// \t<React.StrictMode>\n// \t\t<App />\n// \t</React.StrictMode>,\n// \tdocument.getElementById(\"root\"),\n// )`\n// \t\t: `ReactDOM.${JSON.parse(process.env.RENDER ?? \"false\") === \"true\" ? \"render\" : \"hydrate\"}(\n// \t<App />,\n// \tdocument.getElementById(\"root\"),\n// )`\n// }\n// ` // EOF\n", "import * as T from \"./types\"\nimport * as terminal from \"../shared/terminal\"\nimport * as utils from \"./utils\"\n\nfunction accent(str: string): string {\n\treturn str.replace(/('[^']+')/g, terminal.magenta(\"$1\"))\n}\n\nfunction format(str: string): string {\n\treturn accent(utils.detab(str).trim())\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// CLI\n\nexport function badCommand(run: string): string {\n\treturn format(`\n\t\tBad command '${run}'.\n\n\t\tSupported commands:\n\n\t\tdev     Start the dev server\n\t\texport  Export the production-ready build (SSG)\n\t\tserve   Serve the production-ready build\n\t`)\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Document (index.html)\n\nexport function missingDocumentHeadTag(src: string): string {\n\treturn format(`\n\t\t${src}: Add '%head%' somewhere to '<head>'.\n\n\t\tFor example:\n\n\t\t${terminal.dim(`// ${src}`)}\n\t\t<!DOCTYPE html>\n\t\t\t<head lang=\"en\">\n\t\t\t\t<meta charset=\"utf-8\" />\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t\t\t${terminal.magenta(\"%head%\")}\n\t\t\t\t${terminal.dim(\"...\")}\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t${terminal.dim(\"...\")}\n\t\t\t</body>\n\t\t</html>\n\t`)\n}\n\nexport function missingDocumentAppTag(src: string): string {\n\treturn format(`\n\t\t${src}: Add '%app%' somewhere to '<body>'.\n\n\t\tFor example:\n\n\t\t${terminal.dim(`// ${src}`)}\n\t\t<!DOCTYPE html>\n\t\t\t<head lang=\"en\">\n\t\t\t\t${terminal.dim(\"...\")}\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t${terminal.magenta(\"%app%\")}\n\t\t\t\t${terminal.dim(\"...\")}\n\t\t\t</body>\n\t\t</html>\n\t`)\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Pages\n\nexport function pagesUseNonURICharacters(pages: string[]): string {\n\treturn format(`\n\t\tOne or more pages use non URI-safe characters:\n\n\t\t${pages.map(page => \"- \" + page).join(\"\\n\")}\n\n\t\tURI characters described by RFC 3986:\n\n\t\t2.2. Unreserved Characters\n\n\t\t\tALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\n\t\t2.3. Reserved Characters\n\n\t\t\tgen-delims = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" /\n\t\t\tsub-delims = \"@\" / \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n\t\t\t${\"\\x20\".repeat(11)}/ \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n\t\t${terminal.underline(\"https://tools.ietf.org/html/rfc3986\")}\n\t`)\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Server API\n\nexport function badStaticPageExports(src: string): string {\n\treturn format(`\n\t\t${src}: Bad static page exports.\n\n\t\tStatic page exports should look something like this:\n\n\t\t${terminal.dim(`// ${src}`)}\n\t\texport function serverProps() {\n\t\t\treturn { ${terminal.dim(\"...\")} }\n\t\t}\n\n\t\texport function Head({ path, ...props }) {\n\t\t\treturn <title>Hello, world!</title>\n\t\t}\n\n\t\texport default function Route({ path, ...props }) {\n\t\t\treturn <h1>Hello, world!</h1>\n\t\t}\n\t`)\n}\n\nexport function badDynamicPageExports(src: string): string {\n\treturn format(`\n\t\t${src}: Bad dynamic page exports.\n\n\t\tDynamic page exports should look something like this:\n\n\t\t${terminal.dim(`// ${src}`)}\n\t\texport function serverPaths() {\n\t\t\treturn [\n\t\t\t\t{ path: \"/foo\", props: ${terminal.dim(\"...\")} },\n\t\t\t\t{ path: \"/foo/bar\", props: ${terminal.dim(\"...\")} },\n\t\t\t\t{ path: \"/foo/bar/baz\", props: ${terminal.dim(\"...\")} },\n\t\t\t]\n\t\t}\n\n\t\texport function Head({ path, ...props }) {\n\t\t\treturn <title>Hello, world!</title>\n\t\t}\n\n\t\texport default function Route({ path, ...props }) {\n\t\t\treturn <h1>Hello, world!</h1>\n\t\t}\n\t`)\n}\n\nexport function badServerPropsReturn(src: string): string {\n\treturn format(`\n\t\t${src}.serverProps: Bad 'serverProps' return.\n\n\t\tA 'serverProps' resolver should look something like this:\n\n\t\t${terminal.dim(`// ${src}`)}\n\t\texport function serverProps() {\n\t\t\treturn { ${terminal.dim(\"...\")} }\n\t\t}\n\n\t\t${terminal.dim(`// ${src} (asynchronous)`)}\n\t\texport async function serverProps() {\n\t\t\tawait ${terminal.dim(`...`)}\n\t\t\treturn { ${terminal.dim(\"...\")} }\n\t\t}\n\t`)\n}\n\nexport function badServerPathsReturn(src: string): string {\n\treturn format(`\n\t\t${src}.serverPaths: Bad 'serverPaths' return.\n\n\t\tA 'serverPaths' resolver should look something like this:\n\n\t\t${terminal.dim(`// ${src}`)}\n\t\texport function serverPaths() {\n\t\t\treturn [\n\t\t\t\t{ path: \"/foo\", props: ${terminal.dim(\"...\")} },\n\t\t\t\t{ path: \"/foo/bar\", props: ${terminal.dim(\"...\")} },\n\t\t\t\t{ path: \"/foo/bar/baz\", props: ${terminal.dim(\"...\")} },\n\t\t\t]\n\t\t}\n\n\t\t${terminal.dim(`// ${src} (asynchronous)`)}\n\t\texport async function serverPaths() {\n\t\t\tawait ${terminal.dim(`...`)}\n\t\t\treturn [\n\t\t\t\t{ path: \"/foo\", props: ${terminal.dim(\"...\")} },\n\t\t\t\t{ path: \"/foo/bar\", props: ${terminal.dim(\"...\")} },\n\t\t\t\t{ path: \"/foo/bar/baz\", props: ${terminal.dim(\"...\")} },\n\t\t\t]\n\t\t}\n\t`)\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Server API (etc.)\n\nexport function repeatPath(r1: T.RouteInfo, r2: T.RouteInfo): string {\n\tfunction namespace(routeInfo: T.RouteInfo): string {\n\t\tconst fn = \"static\" ? \"serverProps\" : \"serverPaths\"\n\t\treturn `${routeInfo.src}.${fn}`\n\t}\n\tlet out = \"\"\n\tout += `${namespace(r1)}: Repeat path '${r1.path}'; see ${namespace(r2)}.`\n\tout += r1.src === r2.src ? \"\" : \"\\n\"\n\tout += r1.src === r2.src ? \"\" : `\\n- ${namespace(r1)} defines '${r1.path}'`\n\tout += r1.src === r2.src ? \"\" : `\\n- ${namespace(r1)} defines '${r1.path}'`\n\treturn format(out)\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Serve command\n\n// prettier-ignore\nexport function serveWithoutExportDirectory(): string {\n\treturn format(\"App unexported; try 'retro export && retro serve'.\")\n}\n", "import * as errors from \"../errors\"\nimport * as esbuild from \"esbuild\"\nimport * as esbuildHelpers from \"../esbuild-helpers\"\nimport * as log from \"../../shared/log\"\nimport * as path from \"path\"\nimport * as T from \"../types\"\nimport * as terminal from \"../../shared/terminal\"\nimport * as utils from \"../utils\"\n\nlet service: esbuild.Service\n\nexport async function resolveModule<M extends T.PageModule>(r: T.Runtime, src: string): Promise<M> {\n\tsrc = src\n\tconst dst = path.join(r.directories.cacheDirectory, src.replace(/\\..*$/, \".esbuild.js\"))\n\n\ttry {\n\t\tconst result = await service.build(esbuildHelpers.transpileJSXAndTSConfiguration(src, dst))\n\t\tif (result.warnings.length > 0) {\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlog.warning(esbuildHelpers.format(warning, terminal.yellow))\n\t\t\t}\n\t\t\tprocess.exit(1)\n\t\t}\n\t} catch (error) {\n\t\tif (!(\"errors\" in error) || !(\"warnings\" in error)) throw error\n\t\tlog.error(esbuildHelpers.format((error as esbuild.BuildFailure).errors[0]!, terminal.bold.red))\n\t}\n\n\tlet module_: M\n\ttry {\n\t\t// TODO: Change to path.relative?\n\t\tmodule_ = require(path.join(process.cwd(), dst))\n\t} catch (error) {\n\t\tlog.error(error)\n\t}\n\n\treturn module_!\n}\n\nasync function resolveStaticRoute(r: T.Runtime, pageInfo: T.StaticPageInfo): Promise<T.RouteMeta> {\n\tconst module_ = await resolveModule<T.StaticPageModule>(r, pageInfo.src)\n\tif (!utils.validateStaticModuleExports(module_)) {\n\t\tlog.error(errors.badStaticPageExports(pageInfo.src))\n\t}\n\n\tlet props = {}\n\tif (typeof module_.serverProps === \"function\") {\n\t\ttry {\n\t\t\tprops = await module_.serverProps!()\n\t\t\tif (!utils.validateServerPropsReturn(props)) {\n\t\t\t\tlog.error(errors.badServerPropsReturn(pageInfo.src))\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.error(`${pageInfo.src}.serverProps: ${error.message}`)\n\t\t}\n\t}\n\n\tconst routeInfo = pageInfo\n\tconst descriptProps = { path: pageInfo.path, ...props }\n\n\tconst meta = { module: module_, pageInfo, routeInfo, descriptProps }\n\treturn meta\n}\n\nasync function resolveDynamicRoutes(r: T.Runtime, pageInfo: T.DynamicPageInfo): Promise<T.RouteMeta[]> {\n\tconst metas: T.RouteMeta[] = []\n\n\tconst module_ = await resolveModule<T.DynamicPageModule>(r, pageInfo.src)\n\tif (!utils.validateDynamicModuleExports(module_)) {\n\t\tlog.error(errors.badDynamicPageExports(pageInfo.src))\n\t}\n\n\tlet paths: { path: string; props: T.Props }[] = []\n\ttry {\n\t\tpaths = await module_.serverPaths!()\n\t\tif (!utils.validateServerPathsReturn(paths)) {\n\t\t\tlog.error(errors.badServerPathsReturn(pageInfo.src))\n\t\t}\n\t} catch (error) {\n\t\t// TODO: FIXME\n\t\tif (!utils.validateServerPathsReturn(paths)) {\n\t\t\tlog.error(errors.badServerPathsReturn(pageInfo.src))\n\t\t}\n\t\tlog.error(`${pageInfo.src}.serverPaths: ${error.message}`)\n\t}\n\n\tfor (const meta of paths) {\n\t\tconst path_ = path.join(path.dirname(pageInfo.src).slice(r.directories.srcPagesDirectory.length), meta.path)\n\t\tconst dst = path.join(r.directories.exportDirectory, path_ + \".html\")\n\t\tmetas.push({\n\t\t\tmodule: module_,\n\t\t\tpageInfo,\n\t\t\trouteInfo: {\n\t\t\t\t...pageInfo,\n\t\t\t\tdst,\n\t\t\t\tpath: path_,\n\t\t\t},\n\t\t\tdescriptProps: {\n\t\t\t\tpath: path_, // Add path\n\t\t\t\t...meta.props,\n\t\t\t},\n\t\t})\n\t}\n\treturn metas\n}\n\n// newFromRuntime resolves serverProps and serverPaths and generates a server-\n// resolved router.\n//\n// TODO: Add support for hooks or middleware so logging can be externalized?\nexport async function newFromRuntime(runtime: T.Runtime): Promise<T.Router> {\n\tconst router: T.Router = {}\n\n\tservice = await esbuild.startService()\n\tfor (const pageInfo of runtime.pageInfos) {\n\t\tif (pageInfo.type === \"static\") {\n\t\t\tconst meta = await resolveStaticRoute(runtime, pageInfo)\n\t\t\tif (router[meta.routeInfo.path] !== undefined) {\n\t\t\t\tlog.error(errors.repeatPath(meta.routeInfo, router[meta.routeInfo.path]!.routeInfo))\n\t\t\t}\n\t\t\trouter[meta.routeInfo.path] = meta\n\t\t} else {\n\t\t\tconst metas = await resolveDynamicRoutes(runtime, pageInfo)\n\t\t\tfor (const meta of metas) {\n\t\t\t\tif (router[meta.routeInfo.path] !== undefined) {\n\t\t\t\t\tlog.error(errors.repeatPath(meta.routeInfo, router[meta.routeInfo.path]!.routeInfo))\n\t\t\t\t}\n\t\t\t\trouter[meta.routeInfo.path] = meta\n\t\t\t}\n\t\t}\n\t}\n\treturn router\n}\n", "import * as errors from \"../errors\"\nimport * as esbuild from \"esbuild\"\nimport * as events from \"../events\"\nimport * as fs from \"fs\"\nimport * as http from \"http\"\nimport * as log from \"../../shared/log\"\nimport * as T from \"../types\"\nimport * as utils from \"../utils\"\n\nexport async function serve(r: T.Runtime<T.ServeCommand>): Promise<void> {\n\ttry {\n\t\tawait fs.promises.stat(r.directories.exportDirectory)\n\t} catch {\n\t\tlog.error(errors.serveWithoutExportDirectory())\n\t}\n\n\t// Add a serve request handler:\n\tlet once = false\n\tconst result = await esbuild.serve(\n\t\t{\n\t\t\tservedir: r.directories.exportDirectory,\n\t\t\tonRequest: (args: esbuild.ServeOnRequestArgs) => {\n\t\t\t\tif (!once) {\n\t\t\t\t\tconsole.log()\n\t\t\t\t\tonce = true\n\t\t\t\t}\n\t\t\t\tevents.serve(args)\n\t\t\t},\n\t\t},\n\t\t{},\n\t)\n\n\t// This implementation is roughly based on:\n\t//\n\t// - https://esbuild.github.io/api/#customizing-server-behavior\n\t// - https://github.com/evanw/esbuild/issues/858#issuecomment-782814216\n\t//\n\tconst server_proxy = http.createServer((req, res) => {\n\t\tconst opts = {\n\t\t\thostname: result.host,\n\t\t\tport: result.port,\n\t\t\tpath: utils.ssgify(req.url!),\n\t\t\tmethod: req.method,\n\t\t\theaders: req.headers,\n\t\t}\n\t\tconst req_proxy = http.request(opts, res_proxy => {\n\t\t\tif (res_proxy.statusCode === 404) {\n\t\t\t\tres.writeHead(404, { \"Content-Type\": \"text/plain\" })\n\t\t\t\tres.end(\"404 - Not Found\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tres.writeHead(res_proxy.statusCode!, res_proxy.headers)\n\t\t\tres_proxy.pipe(res, { end: true })\n\t\t})\n\t\treq.pipe(req_proxy, { end: true })\n\t})\n\n\tserver_proxy.listen(r.command.port)\n}\n", "import * as esbuild from \"esbuild\"\nimport * as esbuildHelpers from \"../esbuild-helpers\"\nimport * as events from \"../events\"\nimport * as fsp from \"fs/promises\"\nimport * as log from \"../../shared/log\"\nimport * as path from \"path\"\nimport * as router from \"../router\"\nimport * as terminal from \"../../shared/terminal\"\nimport * as types from \"../types\"\n\nasync function exportPages(runtime: types.Runtime): Promise<void> {\n\tlet once = false\n\tfor (const meta of Object.values(runtime.router)) {\n\t\tconst start = Date.now()\n\t\tconst contents = router.renderRouteMetaToString(runtime.template, meta, { dev: false })\n\t\tawait fsp.mkdir(path.dirname(meta.routeInfo.dst), { recursive: true })\n\t\tawait fsp.writeFile(meta.routeInfo.dst, contents)\n\t\tif (!once) {\n\t\t\tconsole.log()\n\t\t\tonce = true\n\t\t}\n\t\tevents.export_(runtime, meta, start)\n\t}\n\tconsole.log()\n}\n\nasync function exportApp(runtime: types.Runtime): Promise<void> {\n\tconst src = path.join(runtime.directories.cacheDirectory, \"app.js\")\n\tconst dst = path.join(runtime.directories.exportDirectory, src.slice(runtime.directories.srcPagesDirectory.length))\n\n\t// __cache__/app.js\n\tconst contents = router.renderRouterToString(runtime.router)\n\tawait fsp.writeFile(src, contents)\n\n\t// __export__/app.js\n\ttry {\n\t\tconst result = await esbuild.build(esbuildHelpers.bundleAppConfiguration(src, dst))\n\t\tif (result.warnings.length > 0) {\n\t\t\tfor (const warning of result.warnings) {\n\t\t\t\tlog.warning(esbuildHelpers.format(warning, terminal.yellow))\n\t\t\t}\n\t\t\tprocess.exit(1)\n\t\t}\n\t} catch (error) {\n\t\tif (!(\"errors\" in error) || !(\"warnings\" in error)) throw error\n\t\tlog.error(esbuildHelpers.format((error as esbuild.BuildFailure).errors[0]!, terminal.bold.red))\n\t}\n}\n\nexport async function export_(runtime: types.Runtime<types.ExportCommand>): Promise<void> {\n\tawait exportPages(runtime)\n\tawait exportApp(runtime)\n}\n", "import * as errors from \"./errors\"\nimport * as fs from \"fs\"\nimport * as log from \"../shared/log\"\nimport * as pages from \"./pages\"\nimport * as path from \"path\"\nimport * as router from \"./router\"\nimport * as T from \"./types\"\nimport * as utils from \"./utils\"\n\nexport default async function newRuntimeFromCommand(command: T.Command): Promise<T.Runtime<typeof command>> {\n\tconst runtime: T.Runtime<typeof command> = {\n\t\tcommand,\n\t\tdirectories: {\n\t\t\tpublicDirectory: \"www\",\n\t\t\tsrcPagesDirectory: \"src/pages\",\n\t\t\tcacheDirectory: \"__cache__\",\n\t\t\texportDirectory: \"__export__\",\n\t\t},\n\t\ttemplate: \"\",\n\t\tpageInfos: [],\n\t\trouter: {},\n\n\t\t// runServerGuards runs server guards.\n\t\tasync runServerGuards(): Promise<void> {\n\t\t\tconst dirs = [\n\t\t\t\truntime.directories.publicDirectory,\n\t\t\t\truntime.directories.srcPagesDirectory,\n\t\t\t\truntime.directories.cacheDirectory,\n\t\t\t\truntime.directories.exportDirectory,\n\t\t\t]\n\n\t\t\tfor (const dir of dirs) {\n\t\t\t\ttry {\n\t\t\t\t\tawait fs.promises.stat(dir)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tfs.promises.mkdir(dir, { recursive: true })\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst src = path.join(runtime.directories.publicDirectory, \"index.html\")\n\n\t\t\ttry {\n\t\t\t\tfs.promises.stat(src)\n\t\t\t} catch (error) {\n\t\t\t\tawait fs.promises.writeFile(\n\t\t\t\t\tsrc,\n\t\t\t\t\tutils.detab(`\n\t\t\t\t\t\t<!DOCTYPE html>\n\t\t\t\t\t\t<html lang=\"en\">\n\t\t\t\t\t\t\t<head>\n\t\t\t\t\t\t\t\t<meta charset=\"utf-8\" />\n\t\t\t\t\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t\t\t\t\t\t\t%head%\n\t\t\t\t\t\t\t</head>\n\t\t\t\t\t\t\t<body>\n\t\t\t\t\t\t\t\t%app%\n\t\t\t\t\t\t\t</body>\n\t\t\t\t\t\t</html>\n\t\t\t\t\t`),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tconst buffer = await fs.promises.readFile(src)\n\t\t\tconst str = buffer.toString()\n\n\t\t\tif (!str.includes(\"%head\")) {\n\t\t\t\tlog.error(errors.missingDocumentHeadTag(src))\n\t\t\t} else if (!str.includes(\"%app\")) {\n\t\t\t\tlog.error(errors.missingDocumentAppTag(src))\n\t\t\t}\n\t\t},\n\n\t\t// purge purges __cache__ and __export__.\n\t\tasync purge(): Promise<void> {\n\t\t\tconst dirs = runtime.directories\n\t\t\tawait fs.promises.rmdir(dirs.cacheDirectory, { recursive: true })\n\t\t\tawait fs.promises.rmdir(dirs.exportDirectory, { recursive: true })\n\n\t\t\t// await this.runServerGuards()\n\t\t\tconst excludes = [path.join(dirs.publicDirectory, \"index.html\")]\n\n\t\t\t// TODO: Do we need this?\n\t\t\tawait fs.promises.mkdir(path.join(dirs.exportDirectory, dirs.publicDirectory), { recursive: true })\n\t\t\tawait utils.copyAll(dirs.publicDirectory, path.join(dirs.exportDirectory, dirs.publicDirectory), excludes)\n\t\t},\n\n\t\t// resolveDocument resolves and or refreshes this.document.\n\t\tasync resolveDocument(): Promise<void> {\n\t\t\tconst src = path.join(this.directories.publicDirectory, \"index.html\")\n\t\t\tconst buffer = await fs.promises.readFile(src)\n\t\t\tconst str = buffer.toString()\n\t\t\tthis.template = str\n\t\t},\n\n\t\t// resolvePages resolves and or refreshes this.pages.\n\t\tasync resolvePages(): Promise<void> {\n\t\t\tthis.pageInfos = await pages.newFromDirectories(this.directories)\n\t\t},\n\n\t\t// resolveRouter resolves and or refreshes this.router.\n\t\tasync resolveRouter(): Promise<void> {\n\t\t\tthis.router = await router.newFromRuntime(this)\n\t\t},\n\t}\n\n\tasync function start(): Promise<void> {\n\t\tif (runtime.command.type === \"serve\") {\n\t\t\t// No-op\n\t\t\treturn\n\t\t}\n\t\tawait runtime.runServerGuards()\n\t\tawait runtime.purge() // TODO\n\t\tawait runtime.resolveDocument()\n\t\tawait runtime.resolvePages()\n\t\tawait runtime.resolveRouter()\n\t}\n\n\tawait start()\n\treturn runtime\n}\n", "import * as errors from \"../errors\"\nimport * as log from \"../../shared/log\"\nimport * as path from \"path\"\nimport * as types from \"../types\"\nimport * as utils from \"../utils\"\n\nconst dynamicPathRegex = /(\\/)(\\[)([a-zA-Z0-9\\-\\.\\_\\~\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]+)(\\])/\n\n// \"src/pages/index.js\" -> \"/\"\n// \"src/pages/page.js\" -> \"/page\"\n// \"src/pages/nested/page.js\" -> \"/nested/page\"\n//\n// TODO: Write tests.\nfunction path_(dirs: types.Directories, pathInfo: utils.PathInfo): string {\n\tconst out = pathInfo.src.slice(dirs.srcPagesDirectory.length, -pathInfo.ext.length)\n\tif (out.endsWith(\"/index\")) {\n\t\treturn out.slice(0, -\"index\".length)\n\t}\n\treturn out\n}\n\n// src/pages/index.js -> __export__/index.html\n// src/pages/page.js -> __export__/page.html\n// src/pages/nested/page.js -> __export__/nested/page.html\n//\n// TODO: Write tests.\nfunction dst(dirs: types.Directories, pathInfo: utils.PathInfo): string {\n\tconst out = path.join(dirs.exportDirectory, pathInfo.src.slice(dirs.srcPagesDirectory.length))\n\treturn out.slice(0, -pathInfo.ext.length) + \".html\"\n}\n\n// src/pages/index.js -> StaticIndex\n// src/pages/page.js -> StaticPage\n// src/pages/nested/page.js -> StaticNestedPage\n//\n// TODO: Write tests.\nfunction component(dirs: types.Directories, pathInfo: utils.PathInfo, { dynamic }: { dynamic: boolean }): string {\n\tlet out = \"\"\n\tconst parts = path_(dirs, pathInfo).split(path.sep)\n\tfor (let part of parts) {\n\t\t// if (part.startsWith(\"[\") && part.endsWith(\"]\")) {\n\t\t// \tpart = part.slice(1, -1) // Remove \"[\" and \"]\" syntax\n\t\t// }\n\t\tpart = part.replace(/[^a-zA-Z_0-9]+/g, \"\")\n\t\tif (part.length === 0) continue\n\t\tout += part[0]!.toUpperCase() + part.slice(1)\n\t}\n\tout = (!dynamic ? \"Static\" : \"Dynamic\") + (out ?? \"Index\")\n\treturn out\n}\n\nfunction newPageInfo(dirs: types.Directories, pathInfo: utils.PathInfo): types.StaticPageInfo {\n\tconst out: types.StaticPageInfo = {\n\t\ttype: \"static\",\n\t\tsrc: pathInfo.src,\n\t\tdst: dst(dirs, pathInfo),\n\t\tpath: path_(dirs, pathInfo),\n\t\tcomponent: component(dirs, pathInfo, { dynamic: false }),\n\t}\n\treturn out\n}\n\nfunction newDynamicPageInfo(dirs: types.Directories, pathInfo: utils.PathInfo): types.DynamicPageInfo {\n\tconst out: types.DynamicPageInfo = {\n\t\ttype: \"dynamic\",\n\t\tsrc: pathInfo.src,\n\t\tcomponent: component(dirs, pathInfo, { dynamic: true }),\n\t}\n\treturn out\n}\n\nconst supported: { [key: string]: boolean } = {\n\t\".js\": true,\n\t\".jsx\": true,\n\t\".ts\": true,\n\t\".tsx\": true,\n}\n\nexport async function newFromDirectories(dirs: types.Directories): Promise<types.PageInfo[]> {\n\tconst srcs = await utils.readdirAll(dirs.srcPagesDirectory)\n\n\t// TODO: Add support for <Layout> components.\n\tconst pathInfos = srcs\n\t\t.map(src => utils.parsePathInfo(src))\n\t\t.filter(pathInfo => {\n\t\t\tif (/^[_$]|[_$]$/.test(pathInfo.name)) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn supported[pathInfo.ext] !== undefined\n\t\t})\n\n\tconst badSrcs: string[] = []\n\tfor (const pathInfo of pathInfos) {\n\t\tif (!utils.testURISafe(pathInfo.src)) {\n\t\t\tbadSrcs.push(pathInfo.src)\n\t\t}\n\t}\n\n\tif (badSrcs.length > 0) {\n\t\tlog.error(errors.pagesUseNonURICharacters(badSrcs))\n\t}\n\n\tconst pages: types.PageInfo[] = []\n\tfor (const pathInfo of pathInfos) {\n\t\tconst syntax = path_(dirs, pathInfo)\n\t\tif (dynamicPathRegex.test(syntax)) {\n\t\t\tpages.push(newDynamicPageInfo(dirs, pathInfo))\n\t\t\tcontinue\n\t\t}\n\t\tpages.push(newPageInfo(dirs, pathInfo))\n\t}\n\treturn pages\n}\n"],
  "mappings": "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",
  "names": []
}
